
MyProject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011c  00800100  000008d6  0000096a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003e  0080021c  0080021c  00000a86  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a86  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ab8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a31  00000000  00000000  00000c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000115d  00000000  00000000  00002641  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001652  00000000  00000000  0000379e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000280  00000000  00000000  00004df0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000b3ec  00000000  00000000  00005070  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009c2  00000000  00000000  0001045c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00010e1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000047a9  00000000  00000000  00010efe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	3d c0       	rjmp	.+122    	; 0x7c <__ctors_end>
   2:	00 00       	nop
   4:	56 c0       	rjmp	.+172    	; 0xb2 <__bad_interrupt>
   6:	00 00       	nop
   8:	54 c0       	rjmp	.+168    	; 0xb2 <__bad_interrupt>
   a:	00 00       	nop
   c:	52 c0       	rjmp	.+164    	; 0xb2 <__bad_interrupt>
   e:	00 00       	nop
  10:	50 c0       	rjmp	.+160    	; 0xb2 <__bad_interrupt>
  12:	00 00       	nop
  14:	4e c0       	rjmp	.+156    	; 0xb2 <__bad_interrupt>
  16:	00 00       	nop
  18:	4c c0       	rjmp	.+152    	; 0xb2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4a c0       	rjmp	.+148    	; 0xb2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	48 c0       	rjmp	.+144    	; 0xb2 <__bad_interrupt>
  22:	00 00       	nop
  24:	46 c0       	rjmp	.+140    	; 0xb2 <__bad_interrupt>
  26:	00 00       	nop
  28:	44 c0       	rjmp	.+136    	; 0xb2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	42 c0       	rjmp	.+132    	; 0xb2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	40 c0       	rjmp	.+128    	; 0xb2 <__bad_interrupt>
  32:	00 00       	nop
  34:	3e c0       	rjmp	.+124    	; 0xb2 <__bad_interrupt>
  36:	00 00       	nop
  38:	3c c0       	rjmp	.+120    	; 0xb2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3a c0       	rjmp	.+116    	; 0xb2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	38 c0       	rjmp	.+112    	; 0xb2 <__bad_interrupt>
  42:	00 00       	nop
  44:	36 c0       	rjmp	.+108    	; 0xb2 <__bad_interrupt>
  46:	00 00       	nop
  48:	34 c0       	rjmp	.+104    	; 0xb2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	32 c0       	rjmp	.+100    	; 0xb2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	4e c1       	rjmp	.+668    	; 0x2ee <__vector_20>
  52:	00 00       	nop
  54:	2e c0       	rjmp	.+92     	; 0xb2 <__bad_interrupt>
  56:	00 00       	nop
  58:	2c c0       	rjmp	.+88     	; 0xb2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2a c0       	rjmp	.+84     	; 0xb2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	28 c0       	rjmp	.+80     	; 0xb2 <__bad_interrupt>
  62:	00 00       	nop
  64:	26 c0       	rjmp	.+76     	; 0xb2 <__bad_interrupt>
  66:	00 00       	nop
  68:	24 c0       	rjmp	.+72     	; 0xb2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	22 c0       	rjmp	.+68     	; 0xb2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	20 c0       	rjmp	.+64     	; 0xb2 <__bad_interrupt>
  72:	00 00       	nop
  74:	1e c0       	rjmp	.+60     	; 0xb2 <__bad_interrupt>
  76:	00 00       	nop
  78:	1c c0       	rjmp	.+56     	; 0xb2 <__bad_interrupt>
	...

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d4 e0       	ldi	r29, 0x04	; 4
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	12 e0       	ldi	r17, 0x02	; 2
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e6 ed       	ldi	r30, 0xD6	; 214
  90:	f8 e0       	ldi	r31, 0x08	; 8
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	ac 31       	cpi	r26, 0x1C	; 28
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	22 e0       	ldi	r18, 0x02	; 2
  a0:	ac e1       	ldi	r26, 0x1C	; 28
  a2:	b2 e0       	ldi	r27, 0x02	; 2
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	aa 35       	cpi	r26, 0x5A	; 90
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	2c d0       	rcall	.+88     	; 0x108 <main>
  b0:	10 c4       	rjmp	.+2080   	; 0x8d2 <_exit>

000000b2 <__bad_interrupt>:
  b2:	a6 cf       	rjmp	.-180    	; 0x0 <__vectors>

000000b4 <can_clear_all_mob>:

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	ad ee       	ldi	r26, 0xED	; 237
  b8:	b0 e0       	ldi	r27, 0x00	; 0
  ba:	98 2f       	mov	r25, r24
  bc:	92 95       	swap	r25
  be:	90 7f       	andi	r25, 0xF0	; 240
  c0:	9c 93       	st	X, r25
  c2:	ee ee       	ldi	r30, 0xEE	; 238
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	11 92       	st	Z+, r1
  c8:	e8 3f       	cpi	r30, 0xF8	; 248
  ca:	f1 05       	cpc	r31, r1
  cc:	e1 f7       	brne	.-8      	; 0xc6 <can_clear_all_mob+0x12>
  ce:	8f 5f       	subi	r24, 0xFF	; 255
  d0:	86 30       	cpi	r24, 0x06	; 6
  d2:	99 f7       	brne	.-26     	; 0xba <can_clear_all_mob+0x6>
  d4:	08 95       	ret

000000d6 <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
    Can_reset();
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    Can_conf_bt();
  dc:	8e e0       	ldi	r24, 0x0E	; 14
  de:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
  e2:	8c e0       	ldi	r24, 0x0C	; 12
  e4:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
  e8:	87 e3       	ldi	r24, 0x37	; 55
  ea:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    return 1;
}
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	08 95       	ret

000000f2 <can_init>:
//!         ==0: research of bit timing configuration failed
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
  f2:	f1 df       	rcall	.-30     	; 0xd6 <can_fixed_baudrate>
  f4:	88 23       	and	r24, r24
  f6:	39 f0       	breq	.+14     	; 0x106 <can_init+0x14>
  f8:	dd df       	rcall	.-70     	; 0xb4 <can_clear_all_mob>
  fa:	e8 ed       	ldi	r30, 0xD8	; 216
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	82 60       	ori	r24, 0x02	; 2
 102:	80 83       	st	Z, r24
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	08 95       	ret

00000108 <main>:
uint8_t can_buffer_rx[CAN_BUFFER_SIZE];



int main(void)
{
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	cd b7       	in	r28, 0x3d	; 61
 10e:	de b7       	in	r29, 0x3e	; 62
 110:	c0 58       	subi	r28, 0x80	; 128
 112:	d1 09       	sbc	r29, r1
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	f8 94       	cli
 118:	de bf       	out	0x3e, r29	; 62
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	cd bf       	out	0x3d, r28	; 61
	uart_init(9600);
 11e:	80 e8       	ldi	r24, 0x80	; 128
 120:	95 e2       	ldi	r25, 0x25	; 37
 122:	28 d1       	rcall	.+592    	; 0x374 <uart_init>
	fdevopen(&uart_putc, NULL);
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	70 e0       	ldi	r23, 0x00	; 0
 128:	84 ee       	ldi	r24, 0xE4	; 228
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	af d1       	rcall	.+862    	; 0x48c <fdevopen>
	fdevopen((int (*)(char,  struct __file *))&uart_getc, NULL);
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	8d ef       	ldi	r24, 0xFD	; 253
 134:	91 e0       	ldi	r25, 0x01	; 1
	can_init(0);
 136:	aa d1       	rcall	.+852    	; 0x48c <fdevopen>
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	db df       	rcall	.-74     	; 0xf2 <can_init>
	CANGIE |= (1 << ENIT);
 13c:	eb ed       	ldi	r30, 0xDB	; 219
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	80 68       	ori	r24, 0x80	; 128
 144:	80 83       	st	Z, r24
	sei();
 146:	78 94       	sei
	
	can_buffer_rx[0] = 0x00; //Byte 0
 148:	ec e3       	ldi	r30, 0x3C	; 60
 14a:	f2 e0       	ldi	r31, 0x02	; 2
 14c:	10 82       	st	Z, r1
	can_buffer_rx[1] = 0x00; //Software throttle
 14e:	11 82       	std	Z+1, r1	; 0x01
	can_buffer_rx[2] = 0x00;
 150:	12 82       	std	Z+2, r1	; 0x02
	can_buffer_rx[3] = 0x00;
 152:	13 82       	std	Z+3, r1	; 0x03
	can_buffer_rx[4] = 0x00;
 154:	14 82       	std	Z+4, r1	; 0x04
	can_buffer_rx[5] = 0x00;
 156:	15 82       	std	Z+5, r1	; 0x05
	can_buffer_rx[6] = 0x00;
 158:	16 82       	std	Z+6, r1	; 0x06
	can_buffer_rx[7] = 0x00;
 15a:	17 82       	std	Z+7, r1	; 0x07
	
	//Can_config_rx();
	//Can_config_rx_buffer();
	//can_get_data(0x200);
	
	rx_conf.pt_data = &can_buffer_rx[0];
 15c:	ac e1       	ldi	r26, 0x1C	; 28
 15e:	b2 e0       	ldi	r27, 0x02	; 2
 160:	18 96       	adiw	r26, 0x08	; 8
 162:	fc 93       	st	X, r31
 164:	ee 93       	st	-X, r30
 166:	17 97       	sbiw	r26, 0x07	; 7
	rx_conf.ctrl.ide = 0;
 168:	1b 96       	adiw	r26, 0x0b	; 11
 16a:	1c 92       	st	X, r1
 16c:	1b 97       	sbiw	r26, 0x0b	; 11
	rx_conf.dlc = 8;//
 16e:	98 e0       	ldi	r25, 0x08	; 8
 170:	16 96       	adiw	r26, 0x06	; 6
 172:	9c 93       	st	X, r25
 174:	16 97       	sbiw	r26, 0x06	; 6
	//rx_conf.ctrl.rtr = 0;
	rx_conf.id.std = CAN_ID+1;//
 176:	21 e8       	ldi	r18, 0x81	; 129
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	13 96       	adiw	r26, 0x03	; 3
 17c:	3c 93       	st	X, r19
 17e:	2e 93       	st	-X, r18
 180:	12 97       	sbiw	r26, 0x02	; 2
	//rx_conf.cmd = CMD_RX_DATA;
	rx_conf.cmd = CMD_RX_MASKED;
 182:	87 e0       	ldi	r24, 0x07	; 7
 184:	11 96       	adiw	r26, 0x01	; 1
 186:	8c 93       	st	X, r24

	//Setup receive message
	rx_rtr.pt_data = &can_buffer_rx[7];
 188:	e4 e4       	ldi	r30, 0x44	; 68
 18a:	f2 e0       	ldi	r31, 0x02	; 2
 18c:	43 e4       	ldi	r20, 0x43	; 67
 18e:	52 e0       	ldi	r21, 0x02	; 2
 190:	50 87       	std	Z+8, r21	; 0x08
 192:	47 83       	std	Z+7, r20	; 0x07
	rx_rtr.ctrl.ide = 0;
 194:	13 86       	std	Z+11, r1	; 0x0b
	rx_rtr.ctrl.rtr = 1;
 196:	41 e0       	ldi	r20, 0x01	; 1
 198:	42 87       	std	Z+10, r20	; 0x0a
	rx_rtr.dlc = 8;
 19a:	96 83       	std	Z+6, r25	; 0x06
	rx_rtr.id.std = CAN_ID+1;
 19c:	33 83       	std	Z+3, r19	; 0x03
 19e:	22 83       	std	Z+2, r18	; 0x02
	rx_rtr.cmd = CMD_RX_REMOTE_MASKED;
 1a0:	99 e0       	ldi	r25, 0x09	; 9
 1a2:	91 83       	std	Z+1, r25	; 0x01
	//fgets(temp_buff, 8, stdin);
	//printf("Good to meet you, %s. \n", temp_buff);
	
	while (1)
	{
		can_buffer_tx[0] = 0xFF; //Byte 0
 1a4:	e4 e3       	ldi	r30, 0x34	; 52
 1a6:	f2 e0       	ldi	r31, 0x02	; 2
 1a8:	9f ef       	ldi	r25, 0xFF	; 255
 1aa:	90 83       	st	Z, r25
		can_buffer_tx[1] = 0x55; //Physical throttle
 1ac:	95 e5       	ldi	r25, 0x55	; 85
 1ae:	91 83       	std	Z+1, r25	; 0x01
		can_buffer_tx[2] = 0x33; //Software throttle
 1b0:	93 e3       	ldi	r25, 0x33	; 51
 1b2:	92 83       	std	Z+2, r25	; 0x02
		can_buffer_tx[3] = 0x0F; //Current
 1b4:	9f e0       	ldi	r25, 0x0F	; 15
 1b6:	93 83       	std	Z+3, r25	; 0x03
		can_buffer_tx[4] = 0xF0; //Current
 1b8:	90 ef       	ldi	r25, 0xF0	; 240
 1ba:	94 83       	std	Z+4, r25	; 0x04
		can_buffer_tx[5] = 0x77; //Voltage
 1bc:	97 e7       	ldi	r25, 0x77	; 119
 1be:	95 83       	std	Z+5, r25	; 0x05
		can_buffer_tx[6] = 0xaa; //Voltage
 1c0:	9a ea       	ldi	r25, 0xAA	; 170
 1c2:	96 83       	std	Z+6, r25	; 0x06
		can_buffer_tx[7] = 0x9c; //Reserved
 1c4:	9c e9       	ldi	r25, 0x9C	; 156
 1c6:	97 83       	std	Z+7, r25	; 0x07
		
		tx_msg.pt_data = &can_buffer_tx[0];
 1c8:	a8 e2       	ldi	r26, 0x28	; 40
 1ca:	b2 e0       	ldi	r27, 0x02	; 2
 1cc:	18 96       	adiw	r26, 0x08	; 8
 1ce:	fc 93       	st	X, r31
 1d0:	ee 93       	st	-X, r30
 1d2:	17 97       	sbiw	r26, 0x07	; 7
		tx_msg.ctrl.ide = 0;
 1d4:	1b 96       	adiw	r26, 0x0b	; 11
 1d6:	1c 92       	st	X, r1
 1d8:	1b 97       	sbiw	r26, 0x0b	; 11
		tx_msg.dlc = 7;
 1da:	16 96       	adiw	r26, 0x06	; 6
 1dc:	8c 93       	st	X, r24
 1de:	16 97       	sbiw	r26, 0x06	; 6
		tx_msg.id.std = 0x011;
 1e0:	81 e1       	ldi	r24, 0x11	; 17
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	13 96       	adiw	r26, 0x03	; 3
 1e6:	9c 93       	st	X, r25
 1e8:	8e 93       	st	-X, r24
 1ea:	12 97       	sbiw	r26, 0x02	; 2
		tx_msg.cmd = CMD_TX_DATA;
 1ec:	82 e0       	ldi	r24, 0x02	; 2
 1ee:	11 96       	adiw	r26, 0x01	; 1
		fgets(temp_buff, 8, stdin);
		can_msg = uart_getc(temp_buff);
		sprintf(temp_buff, "%x", can_msg);*/
		
		for(;;) {
			puts("Type Something:");
 1f0:	8c 93       	st	X, r24
 1f2:	8c e0       	ldi	r24, 0x0C	; 12
			gets(&buffer[0]);
 1f4:	92 e0       	ldi	r25, 0x02	; 2
 1f6:	bd d1       	rcall	.+890    	; 0x572 <puts>
 1f8:	ce 01       	movw	r24, r28
			puts(&buffer[0]);
 1fa:	01 96       	adiw	r24, 0x01	; 1
 1fc:	91 d1       	rcall	.+802    	; 0x520 <gets>
 1fe:	ce 01       	movw	r24, r28
 200:	01 96       	adiw	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 202:	b7 d1       	rcall	.+878    	; 0x572 <puts>
 204:	2f ef       	ldi	r18, 0xFF	; 255
 206:	89 e6       	ldi	r24, 0x69	; 105
 208:	98 e1       	ldi	r25, 0x18	; 24
 20a:	21 50       	subi	r18, 0x01	; 1
 20c:	80 40       	sbci	r24, 0x00	; 0
 20e:	90 40       	sbci	r25, 0x00	; 0
 210:	e1 f7       	brne	.-8      	; 0x20a <main+0x102>
 212:	00 c0       	rjmp	.+0      	; 0x214 <main+0x10c>
 214:	00 00       	nop
 216:	2f ef       	ldi	r18, 0xFF	; 255
 218:	89 e6       	ldi	r24, 0x69	; 105
 21a:	98 e1       	ldi	r25, 0x18	; 24
 21c:	21 50       	subi	r18, 0x01	; 1
 21e:	80 40       	sbci	r24, 0x00	; 0
 220:	90 40       	sbci	r25, 0x00	; 0
 222:	e1 f7       	brne	.-8      	; 0x21c <main+0x114>
 224:	00 c0       	rjmp	.+0      	; 0x226 <main+0x11e>
 226:	00 00       	nop
 228:	e4 cf       	rjmp	.-56     	; 0x1f2 <main+0xea>

0000022a <buffer_write>:
	str[i] = '\0';
}

bool buffer_full(struct ringbuffer* buffer) {
	return ((buffer->head == buffer->tail) && !(buffer->empty));
}
 22a:	fc 01       	movw	r30, r24
 22c:	ee 57       	subi	r30, 0x7E	; 126
 22e:	ff 4f       	sbci	r31, 0xFF	; 255
 230:	20 81       	ld	r18, Z
 232:	22 23       	and	r18, r18
 234:	11 f0       	breq	.+4      	; 0x23a <buffer_write+0x10>
 236:	10 82       	st	Z, r1
 238:	16 c0       	rjmp	.+44     	; 0x266 <buffer_write+0x3c>
 23a:	fc 01       	movw	r30, r24
 23c:	e0 58       	subi	r30, 0x80	; 128
 23e:	ff 4f       	sbci	r31, 0xFF	; 255
 240:	20 81       	ld	r18, Z
 242:	31 96       	adiw	r30, 0x01	; 1
 244:	30 81       	ld	r19, Z
 246:	23 13       	cpse	r18, r19
 248:	0e c0       	rjmp	.+28     	; 0x266 <buffer_write+0x3c>
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	2f 5f       	subi	r18, 0xFF	; 255
 24e:	3f 4f       	sbci	r19, 0xFF	; 255
 250:	2f 77       	andi	r18, 0x7F	; 127
 252:	30 78       	andi	r19, 0x80	; 128
 254:	33 23       	and	r19, r19
 256:	34 f4       	brge	.+12     	; 0x264 <buffer_write+0x3a>
 258:	21 50       	subi	r18, 0x01	; 1
 25a:	31 09       	sbc	r19, r1
 25c:	20 68       	ori	r18, 0x80	; 128
 25e:	3f 6f       	ori	r19, 0xFF	; 255
 260:	2f 5f       	subi	r18, 0xFF	; 255
 262:	3f 4f       	sbci	r19, 0xFF	; 255
 264:	20 83       	st	Z, r18
 266:	fc 01       	movw	r30, r24
 268:	e0 58       	subi	r30, 0x80	; 128
 26a:	ff 4f       	sbci	r31, 0xFF	; 255
 26c:	20 81       	ld	r18, Z
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	dc 01       	movw	r26, r24
 272:	a2 0f       	add	r26, r18
 274:	b3 1f       	adc	r27, r19
 276:	6c 93       	st	X, r22
 278:	c9 01       	movw	r24, r18
 27a:	01 96       	adiw	r24, 0x01	; 1
 27c:	8f 77       	andi	r24, 0x7F	; 127
 27e:	90 78       	andi	r25, 0x80	; 128
 280:	99 23       	and	r25, r25
 282:	24 f4       	brge	.+8      	; 0x28c <buffer_write+0x62>
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	80 68       	ori	r24, 0x80	; 128
 288:	9f 6f       	ori	r25, 0xFF	; 255
 28a:	01 96       	adiw	r24, 0x01	; 1
 28c:	80 83       	st	Z, r24
 28e:	08 95       	ret

00000290 <buffer_read>:
 290:	fc 01       	movw	r30, r24
 292:	ee 57       	subi	r30, 0x7E	; 126
 294:	ff 4f       	sbci	r31, 0xFF	; 255
 296:	20 81       	ld	r18, Z
 298:	21 11       	cpse	r18, r1
 29a:	22 c0       	rjmp	.+68     	; 0x2e0 <buffer_read+0x50>
 29c:	31 97       	sbiw	r30, 0x01	; 1
 29e:	20 81       	ld	r18, Z
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	fc 01       	movw	r30, r24
 2a4:	e2 0f       	add	r30, r18
 2a6:	f3 1f       	adc	r31, r19
 2a8:	40 81       	ld	r20, Z
 2aa:	2f 5f       	subi	r18, 0xFF	; 255
 2ac:	3f 4f       	sbci	r19, 0xFF	; 255
 2ae:	2f 77       	andi	r18, 0x7F	; 127
 2b0:	30 78       	andi	r19, 0x80	; 128
 2b2:	33 23       	and	r19, r19
 2b4:	34 f4       	brge	.+12     	; 0x2c2 <buffer_read+0x32>
 2b6:	21 50       	subi	r18, 0x01	; 1
 2b8:	31 09       	sbc	r19, r1
 2ba:	20 68       	ori	r18, 0x80	; 128
 2bc:	3f 6f       	ori	r19, 0xFF	; 255
 2be:	2f 5f       	subi	r18, 0xFF	; 255
 2c0:	3f 4f       	sbci	r19, 0xFF	; 255
 2c2:	fc 01       	movw	r30, r24
 2c4:	ef 57       	subi	r30, 0x7F	; 127
 2c6:	ff 4f       	sbci	r31, 0xFF	; 255
 2c8:	20 83       	st	Z, r18
 2ca:	dc 01       	movw	r26, r24
 2cc:	ae 57       	subi	r26, 0x7E	; 126
 2ce:	bf 4f       	sbci	r27, 0xFF	; 255
 2d0:	31 97       	sbiw	r30, 0x01	; 1
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 81       	ld	r25, Z
 2d6:	92 13       	cpse	r25, r18
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	8c 93       	st	X, r24
 2dc:	84 2f       	mov	r24, r20
 2de:	08 95       	ret
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	08 95       	ret

000002e4 <buffer_empty>:


bool buffer_empty(struct ringbuffer* buffer) {
	return buffer->empty;
 2e4:	8e 57       	subi	r24, 0x7E	; 126
 2e6:	9f 4f       	sbci	r25, 0xFF	; 255
}
 2e8:	fc 01       	movw	r30, r24
 2ea:	80 81       	ld	r24, Z
 2ec:	08 95       	ret

000002ee <__vector_20>:

volatile struct ringbuffer tx_buffer = {{0}, 0, 0, true};
volatile struct ringbuffer rx_buffer = {{0}, 0, 0, true};

//Receive interrupt routine
ISR(LIN_TC_vect) {
 2ee:	1f 92       	push	r1
 2f0:	0f 92       	push	r0
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	0f 92       	push	r0
 2f6:	11 24       	eor	r1, r1
 2f8:	2f 93       	push	r18
 2fa:	3f 93       	push	r19
 2fc:	4f 93       	push	r20
 2fe:	5f 93       	push	r21
 300:	6f 93       	push	r22
 302:	7f 93       	push	r23
 304:	8f 93       	push	r24
 306:	9f 93       	push	r25
 308:	af 93       	push	r26
 30a:	bf 93       	push	r27
 30c:	ef 93       	push	r30
 30e:	ff 93       	push	r31
	if(LINSIR & (1 << LRXOK)) {
 310:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
 314:	80 ff       	sbrs	r24, 0
 316:	0a c0       	rjmp	.+20     	; 0x32c <__vector_20+0x3e>
		//clear LRXOK
		LINSIR &= ~(1 << LRXOK);
 318:	e9 ec       	ldi	r30, 0xC9	; 201
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	80 81       	ld	r24, Z
 31e:	8e 7f       	andi	r24, 0xFE	; 254
 320:	80 83       	st	Z, r24
		
		//write buffer
		uint8_t recv = LINDAT;
 322:	60 91 d2 00 	lds	r22, 0x00D2	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7e00d2>
		buffer_write(&tx_buffer, recv);	
 326:	89 e8       	ldi	r24, 0x89	; 137
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	7f df       	rcall	.-258    	; 0x22a <buffer_write>
	}
	if(LINSIR & (1 << LTXOK)) {
 32c:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
 330:	81 ff       	sbrs	r24, 1
 332:	0f c0       	rjmp	.+30     	; 0x352 <__vector_20+0x64>
		//clear LTXOK
		//LINSIR &= ~(1 << LTXOK);
		uint8_t data = buffer_read(&tx_buffer); 
 334:	89 e8       	ldi	r24, 0x89	; 137
 336:	91 e0       	ldi	r25, 0x01	; 1
 338:	ab df       	rcall	.-170    	; 0x290 <buffer_read>
		LINDAT = data;
 33a:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7e00d2>
		
		if(buffer_empty(&tx_buffer)) {
 33e:	89 e8       	ldi	r24, 0x89	; 137
 340:	91 e0       	ldi	r25, 0x01	; 1
 342:	d0 df       	rcall	.-96     	; 0x2e4 <buffer_empty>
 344:	88 23       	and	r24, r24
			LINENIR  &= ~(1 << LENTXOK);
 346:	29 f0       	breq	.+10     	; 0x352 <__vector_20+0x64>
 348:	ea ec       	ldi	r30, 0xCA	; 202
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	8d 7f       	andi	r24, 0xFD	; 253
		}
	}
}
 350:	80 83       	st	Z, r24
 352:	ff 91       	pop	r31
 354:	ef 91       	pop	r30
 356:	bf 91       	pop	r27
 358:	af 91       	pop	r26
 35a:	9f 91       	pop	r25
 35c:	8f 91       	pop	r24
 35e:	7f 91       	pop	r23
 360:	6f 91       	pop	r22
 362:	5f 91       	pop	r21
 364:	4f 91       	pop	r20
 366:	3f 91       	pop	r19
 368:	2f 91       	pop	r18
 36a:	0f 90       	pop	r0
 36c:	0f be       	out	0x3f, r0	; 63
 36e:	0f 90       	pop	r0
 370:	1f 90       	pop	r1
 372:	18 95       	reti

00000374 <uart_init>:


void uart_init(uint16_t baud){
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
	//Reset LIN/UART hardware
	LINCR = (1 << LSWRES);
 378:	c8 ec       	ldi	r28, 0xC8	; 200
 37a:	d0 e0       	ldi	r29, 0x00	; 0
 37c:	20 e8       	ldi	r18, 0x80	; 128
 37e:	28 83       	st	Y, r18
	
	//Calculate, and set UART baud rate
	LINBRRH = (((F_CPU / baud) / 16) - 1) >> 8;
 380:	9c 01       	movw	r18, r24
 382:	40 e0       	ldi	r20, 0x00	; 0
 384:	50 e0       	ldi	r21, 0x00	; 0
 386:	60 e4       	ldi	r22, 0x40	; 64
 388:	72 e4       	ldi	r23, 0x42	; 66
 38a:	8f e0       	ldi	r24, 0x0F	; 15
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	40 d0       	rcall	.+128    	; 0x410 <__divmodsi4>
 390:	da 01       	movw	r26, r20
 392:	c9 01       	movw	r24, r18
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	a1 09       	sbc	r26, r1
 398:	b1 09       	sbc	r27, r1
 39a:	89 2f       	mov	r24, r25
 39c:	9a 2f       	mov	r25, r26
 39e:	ab 2f       	mov	r26, r27
 3a0:	bb 27       	eor	r27, r27
 3a2:	a7 fd       	sbrc	r26, 7
 3a4:	ba 95       	dec	r27
 3a6:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	LINBRRL = (((F_CPU / baud) / 16) - 1);
 3aa:	21 50       	subi	r18, 0x01	; 1
 3ac:	20 93 cd 00 	sts	0x00CD, r18	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	
	//Bit sampling rate/re-sync
	LINBTR = (1 << LDISR) | (16 << LBT0);
 3b0:	80 e9       	ldi	r24, 0x90	; 144
 3b2:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

	//RX interrupt
	LINENIR = (1 << LENRXOK);
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>

	//Enable UART RX & TX
	LINCR = (1 << LENA) | (1 << LCMD2) | (1 << LCMD1) | (1 << LCMD0);
 3bc:	8f e0       	ldi	r24, 0x0F	; 15
 3be:	88 83       	st	Y, r24

	sei();
 3c0:	78 94       	sei
}
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	08 95       	ret

000003c8 <uart_putc>:
			
int uart_putc(char data, FILE* file) {
 3c8:	cf 93       	push	r28
 3ca:	c8 2f       	mov	r28, r24
	cli();
 3cc:	f8 94       	cli
	//the the buffer was empty, enable tx interrupt
	if(!(LINENIR & (1 << LENTXOK))) {
 3ce:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
 3d2:	81 fd       	sbrc	r24, 1
 3d4:	08 c0       	rjmp	.+16     	; 0x3e6 <uart_putc+0x1e>
		LINENIR |= (1 << LENTXOK);
 3d6:	ea ec       	ldi	r30, 0xCA	; 202
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	80 81       	ld	r24, Z
 3dc:	82 60       	ori	r24, 0x02	; 2
 3de:	80 83       	st	Z, r24
		LINDAT = data;
 3e0:	c0 93 d2 00 	sts	0x00D2, r28	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7e00d2>
 3e4:	04 c0       	rjmp	.+8      	; 0x3ee <uart_putc+0x26>
	}
	else {
		//add data to buffer
		buffer_write(&tx_buffer, data);
 3e6:	6c 2f       	mov	r22, r28
 3e8:	89 e8       	ldi	r24, 0x89	; 137
 3ea:	91 e0       	ldi	r25, 0x01	; 1
 3ec:	1e df       	rcall	.-452    	; 0x22a <buffer_write>
	}
	sei();
 3ee:	78 94       	sei
	return data;
}
 3f0:	8c 2f       	mov	r24, r28
 3f2:	cc 0f       	add	r28, r28
 3f4:	99 0b       	sbc	r25, r25
 3f6:	cf 91       	pop	r28
 3f8:	08 95       	ret

000003fa <uart_getc>:

uint8_t uart_getc(FILE* file) {
	cli();
 3fa:	f8 94       	cli
	
	int data_read = buffer_read(&rx_buffer);
 3fc:	86 e0       	ldi	r24, 0x06	; 6
 3fe:	91 e0       	ldi	r25, 0x01	; 1
 400:	47 df       	rcall	.-370    	; 0x290 <buffer_read>
 402:	90 e0       	ldi	r25, 0x00	; 0
	if(data_read == '\r') data_read = '\n';
 404:	8d 30       	cpi	r24, 0x0D	; 13
 406:	91 05       	cpc	r25, r1
 408:	11 f4       	brne	.+4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40a:	8a e0       	ldi	r24, 0x0A	; 10
 40c:	90 e0       	ldi	r25, 0x00	; 0
	
	return data_read;
	sei();
 40e:	08 95       	ret

00000410 <__divmodsi4>:
 410:	05 2e       	mov	r0, r21
 412:	97 fb       	bst	r25, 7
 414:	16 f4       	brtc	.+4      	; 0x41a <__divmodsi4+0xa>
 416:	00 94       	com	r0
 418:	0f d0       	rcall	.+30     	; 0x438 <__negsi2>
 41a:	57 fd       	sbrc	r21, 7
 41c:	05 d0       	rcall	.+10     	; 0x428 <__divmodsi4_neg2>
 41e:	14 d0       	rcall	.+40     	; 0x448 <__udivmodsi4>
 420:	07 fc       	sbrc	r0, 7
 422:	02 d0       	rcall	.+4      	; 0x428 <__divmodsi4_neg2>
 424:	46 f4       	brtc	.+16     	; 0x436 <__divmodsi4_exit>
 426:	08 c0       	rjmp	.+16     	; 0x438 <__negsi2>

00000428 <__divmodsi4_neg2>:
 428:	50 95       	com	r21
 42a:	40 95       	com	r20
 42c:	30 95       	com	r19
 42e:	21 95       	neg	r18
 430:	3f 4f       	sbci	r19, 0xFF	; 255
 432:	4f 4f       	sbci	r20, 0xFF	; 255
 434:	5f 4f       	sbci	r21, 0xFF	; 255

00000436 <__divmodsi4_exit>:
 436:	08 95       	ret

00000438 <__negsi2>:
 438:	90 95       	com	r25
 43a:	80 95       	com	r24
 43c:	70 95       	com	r23
 43e:	61 95       	neg	r22
 440:	7f 4f       	sbci	r23, 0xFF	; 255
 442:	8f 4f       	sbci	r24, 0xFF	; 255
 444:	9f 4f       	sbci	r25, 0xFF	; 255
 446:	08 95       	ret

00000448 <__udivmodsi4>:
 448:	a1 e2       	ldi	r26, 0x21	; 33
 44a:	1a 2e       	mov	r1, r26
 44c:	aa 1b       	sub	r26, r26
 44e:	bb 1b       	sub	r27, r27
 450:	fd 01       	movw	r30, r26
 452:	0d c0       	rjmp	.+26     	; 0x46e <__udivmodsi4_ep>

00000454 <__udivmodsi4_loop>:
 454:	aa 1f       	adc	r26, r26
 456:	bb 1f       	adc	r27, r27
 458:	ee 1f       	adc	r30, r30
 45a:	ff 1f       	adc	r31, r31
 45c:	a2 17       	cp	r26, r18
 45e:	b3 07       	cpc	r27, r19
 460:	e4 07       	cpc	r30, r20
 462:	f5 07       	cpc	r31, r21
 464:	20 f0       	brcs	.+8      	; 0x46e <__udivmodsi4_ep>
 466:	a2 1b       	sub	r26, r18
 468:	b3 0b       	sbc	r27, r19
 46a:	e4 0b       	sbc	r30, r20
 46c:	f5 0b       	sbc	r31, r21

0000046e <__udivmodsi4_ep>:
 46e:	66 1f       	adc	r22, r22
 470:	77 1f       	adc	r23, r23
 472:	88 1f       	adc	r24, r24
 474:	99 1f       	adc	r25, r25
 476:	1a 94       	dec	r1
 478:	69 f7       	brne	.-38     	; 0x454 <__udivmodsi4_loop>
 47a:	60 95       	com	r22
 47c:	70 95       	com	r23
 47e:	80 95       	com	r24
 480:	90 95       	com	r25
 482:	9b 01       	movw	r18, r22
 484:	ac 01       	movw	r20, r24
 486:	bd 01       	movw	r22, r26
 488:	cf 01       	movw	r24, r30
 48a:	08 95       	ret

0000048c <fdevopen>:
 48c:	0f 93       	push	r16
 48e:	1f 93       	push	r17
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
 494:	00 97       	sbiw	r24, 0x00	; 0
 496:	31 f4       	brne	.+12     	; 0x4a4 <fdevopen+0x18>
 498:	61 15       	cp	r22, r1
 49a:	71 05       	cpc	r23, r1
 49c:	19 f4       	brne	.+6      	; 0x4a4 <fdevopen+0x18>
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	39 c0       	rjmp	.+114    	; 0x516 <__stack+0x17>
 4a4:	8b 01       	movw	r16, r22
 4a6:	ec 01       	movw	r28, r24
 4a8:	6e e0       	ldi	r22, 0x0E	; 14
 4aa:	70 e0       	ldi	r23, 0x00	; 0
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	90 d0       	rcall	.+288    	; 0x5d2 <calloc>
 4b2:	fc 01       	movw	r30, r24
 4b4:	89 2b       	or	r24, r25
 4b6:	99 f3       	breq	.-26     	; 0x49e <fdevopen+0x12>
 4b8:	80 e8       	ldi	r24, 0x80	; 128
 4ba:	83 83       	std	Z+3, r24	; 0x03
 4bc:	01 15       	cp	r16, r1
 4be:	11 05       	cpc	r17, r1
 4c0:	71 f0       	breq	.+28     	; 0x4de <fdevopen+0x52>
 4c2:	13 87       	std	Z+11, r17	; 0x0b
 4c4:	02 87       	std	Z+10, r16	; 0x0a
 4c6:	81 e8       	ldi	r24, 0x81	; 129
 4c8:	83 83       	std	Z+3, r24	; 0x03
 4ca:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <__iob>
 4ce:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <__iob+0x1>
 4d2:	89 2b       	or	r24, r25
 4d4:	21 f4       	brne	.+8      	; 0x4de <fdevopen+0x52>
 4d6:	f0 93 51 02 	sts	0x0251, r31	; 0x800251 <__iob+0x1>
 4da:	e0 93 50 02 	sts	0x0250, r30	; 0x800250 <__iob>
 4de:	20 97       	sbiw	r28, 0x00	; 0
 4e0:	c9 f0       	breq	.+50     	; 0x514 <__stack+0x15>
 4e2:	d1 87       	std	Z+9, r29	; 0x09
 4e4:	c0 87       	std	Z+8, r28	; 0x08
 4e6:	83 81       	ldd	r24, Z+3	; 0x03
 4e8:	82 60       	ori	r24, 0x02	; 2
 4ea:	83 83       	std	Z+3, r24	; 0x03
 4ec:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <__iob+0x2>
 4f0:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <__iob+0x3>
 4f4:	89 2b       	or	r24, r25
 4f6:	71 f4       	brne	.+28     	; 0x514 <__stack+0x15>
 4f8:	f0 93 53 02 	sts	0x0253, r31	; 0x800253 <__iob+0x3>
 4fc:	e0 93 52 02 	sts	0x0252, r30	; 0x800252 <__iob+0x2>
 500:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <__iob+0x4>
 504:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <__iob+0x5>
 508:	89 2b       	or	r24, r25
 50a:	21 f4       	brne	.+8      	; 0x514 <__stack+0x15>
 50c:	f0 93 55 02 	sts	0x0255, r31	; 0x800255 <__iob+0x5>
 510:	e0 93 54 02 	sts	0x0254, r30	; 0x800254 <__iob+0x4>
 514:	cf 01       	movw	r24, r30
 516:	df 91       	pop	r29
 518:	cf 91       	pop	r28
 51a:	1f 91       	pop	r17
 51c:	0f 91       	pop	r16
 51e:	08 95       	ret

00000520 <gets>:
 520:	0f 93       	push	r16
 522:	1f 93       	push	r17
 524:	cf 93       	push	r28
 526:	df 93       	push	r29
 528:	e0 91 50 02 	lds	r30, 0x0250	; 0x800250 <__iob>
 52c:	f0 91 51 02 	lds	r31, 0x0251	; 0x800251 <__iob+0x1>
 530:	23 81       	ldd	r18, Z+3	; 0x03
 532:	20 fd       	sbrc	r18, 0
 534:	03 c0       	rjmp	.+6      	; 0x53c <gets+0x1c>
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	16 c0       	rjmp	.+44     	; 0x568 <gets+0x48>
 53c:	c9 2f       	mov	r28, r25
 53e:	d8 2f       	mov	r29, r24
 540:	08 2f       	mov	r16, r24
 542:	19 2f       	mov	r17, r25
 544:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <__iob>
 548:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <__iob+0x1>
 54c:	84 d1       	rcall	.+776    	; 0x856 <fgetc>
 54e:	8f 3f       	cpi	r24, 0xFF	; 255
 550:	2f ef       	ldi	r18, 0xFF	; 255
 552:	92 07       	cpc	r25, r18
 554:	81 f3       	breq	.-32     	; 0x536 <gets+0x16>
 556:	f8 01       	movw	r30, r16
 558:	81 93       	st	Z+, r24
 55a:	8f 01       	movw	r16, r30
 55c:	0a 97       	sbiw	r24, 0x0a	; 10
 55e:	91 f7       	brne	.-28     	; 0x544 <gets+0x24>
 560:	31 97       	sbiw	r30, 0x01	; 1
 562:	10 82       	st	Z, r1
 564:	8d 2f       	mov	r24, r29
 566:	9c 2f       	mov	r25, r28
 568:	df 91       	pop	r29
 56a:	cf 91       	pop	r28
 56c:	1f 91       	pop	r17
 56e:	0f 91       	pop	r16
 570:	08 95       	ret

00000572 <puts>:
 572:	0f 93       	push	r16
 574:	1f 93       	push	r17
 576:	cf 93       	push	r28
 578:	df 93       	push	r29
 57a:	e0 91 52 02 	lds	r30, 0x0252	; 0x800252 <__iob+0x2>
 57e:	f0 91 53 02 	lds	r31, 0x0253	; 0x800253 <__iob+0x3>
 582:	23 81       	ldd	r18, Z+3	; 0x03
 584:	21 ff       	sbrs	r18, 1
 586:	1b c0       	rjmp	.+54     	; 0x5be <puts+0x4c>
 588:	8c 01       	movw	r16, r24
 58a:	d0 e0       	ldi	r29, 0x00	; 0
 58c:	c0 e0       	ldi	r28, 0x00	; 0
 58e:	f8 01       	movw	r30, r16
 590:	81 91       	ld	r24, Z+
 592:	8f 01       	movw	r16, r30
 594:	60 91 52 02 	lds	r22, 0x0252	; 0x800252 <__iob+0x2>
 598:	70 91 53 02 	lds	r23, 0x0253	; 0x800253 <__iob+0x3>
 59c:	db 01       	movw	r26, r22
 59e:	18 96       	adiw	r26, 0x08	; 8
 5a0:	ed 91       	ld	r30, X+
 5a2:	fc 91       	ld	r31, X
 5a4:	19 97       	sbiw	r26, 0x09	; 9
 5a6:	88 23       	and	r24, r24
 5a8:	31 f0       	breq	.+12     	; 0x5b6 <puts+0x44>
 5aa:	09 95       	icall
 5ac:	89 2b       	or	r24, r25
 5ae:	79 f3       	breq	.-34     	; 0x58e <puts+0x1c>
 5b0:	df ef       	ldi	r29, 0xFF	; 255
 5b2:	cf ef       	ldi	r28, 0xFF	; 255
 5b4:	ec cf       	rjmp	.-40     	; 0x58e <puts+0x1c>
 5b6:	8a e0       	ldi	r24, 0x0A	; 10
 5b8:	09 95       	icall
 5ba:	89 2b       	or	r24, r25
 5bc:	19 f0       	breq	.+6      	; 0x5c4 <puts+0x52>
 5be:	8f ef       	ldi	r24, 0xFF	; 255
 5c0:	9f ef       	ldi	r25, 0xFF	; 255
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <puts+0x56>
 5c4:	8d 2f       	mov	r24, r29
 5c6:	9c 2f       	mov	r25, r28
 5c8:	df 91       	pop	r29
 5ca:	cf 91       	pop	r28
 5cc:	1f 91       	pop	r17
 5ce:	0f 91       	pop	r16
 5d0:	08 95       	ret

000005d2 <calloc>:
 5d2:	0f 93       	push	r16
 5d4:	1f 93       	push	r17
 5d6:	cf 93       	push	r28
 5d8:	df 93       	push	r29
 5da:	86 9f       	mul	r24, r22
 5dc:	80 01       	movw	r16, r0
 5de:	87 9f       	mul	r24, r23
 5e0:	10 0d       	add	r17, r0
 5e2:	96 9f       	mul	r25, r22
 5e4:	10 0d       	add	r17, r0
 5e6:	11 24       	eor	r1, r1
 5e8:	c8 01       	movw	r24, r16
 5ea:	0d d0       	rcall	.+26     	; 0x606 <malloc>
 5ec:	ec 01       	movw	r28, r24
 5ee:	00 97       	sbiw	r24, 0x00	; 0
 5f0:	21 f0       	breq	.+8      	; 0x5fa <calloc+0x28>
 5f2:	a8 01       	movw	r20, r16
 5f4:	60 e0       	ldi	r22, 0x00	; 0
 5f6:	70 e0       	ldi	r23, 0x00	; 0
 5f8:	27 d1       	rcall	.+590    	; 0x848 <memset>
 5fa:	ce 01       	movw	r24, r28
 5fc:	df 91       	pop	r29
 5fe:	cf 91       	pop	r28
 600:	1f 91       	pop	r17
 602:	0f 91       	pop	r16
 604:	08 95       	ret

00000606 <malloc>:
 606:	0f 93       	push	r16
 608:	1f 93       	push	r17
 60a:	cf 93       	push	r28
 60c:	df 93       	push	r29
 60e:	82 30       	cpi	r24, 0x02	; 2
 610:	91 05       	cpc	r25, r1
 612:	10 f4       	brcc	.+4      	; 0x618 <malloc+0x12>
 614:	82 e0       	ldi	r24, 0x02	; 2
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	e0 91 58 02 	lds	r30, 0x0258	; 0x800258 <__flp>
 61c:	f0 91 59 02 	lds	r31, 0x0259	; 0x800259 <__flp+0x1>
 620:	20 e0       	ldi	r18, 0x00	; 0
 622:	30 e0       	ldi	r19, 0x00	; 0
 624:	a0 e0       	ldi	r26, 0x00	; 0
 626:	b0 e0       	ldi	r27, 0x00	; 0
 628:	30 97       	sbiw	r30, 0x00	; 0
 62a:	19 f1       	breq	.+70     	; 0x672 <malloc+0x6c>
 62c:	40 81       	ld	r20, Z
 62e:	51 81       	ldd	r21, Z+1	; 0x01
 630:	02 81       	ldd	r16, Z+2	; 0x02
 632:	13 81       	ldd	r17, Z+3	; 0x03
 634:	48 17       	cp	r20, r24
 636:	59 07       	cpc	r21, r25
 638:	c8 f0       	brcs	.+50     	; 0x66c <malloc+0x66>
 63a:	84 17       	cp	r24, r20
 63c:	95 07       	cpc	r25, r21
 63e:	69 f4       	brne	.+26     	; 0x65a <malloc+0x54>
 640:	10 97       	sbiw	r26, 0x00	; 0
 642:	31 f0       	breq	.+12     	; 0x650 <malloc+0x4a>
 644:	12 96       	adiw	r26, 0x02	; 2
 646:	0c 93       	st	X, r16
 648:	12 97       	sbiw	r26, 0x02	; 2
 64a:	13 96       	adiw	r26, 0x03	; 3
 64c:	1c 93       	st	X, r17
 64e:	27 c0       	rjmp	.+78     	; 0x69e <malloc+0x98>
 650:	00 93 58 02 	sts	0x0258, r16	; 0x800258 <__flp>
 654:	10 93 59 02 	sts	0x0259, r17	; 0x800259 <__flp+0x1>
 658:	22 c0       	rjmp	.+68     	; 0x69e <malloc+0x98>
 65a:	21 15       	cp	r18, r1
 65c:	31 05       	cpc	r19, r1
 65e:	19 f0       	breq	.+6      	; 0x666 <malloc+0x60>
 660:	42 17       	cp	r20, r18
 662:	53 07       	cpc	r21, r19
 664:	18 f4       	brcc	.+6      	; 0x66c <malloc+0x66>
 666:	9a 01       	movw	r18, r20
 668:	bd 01       	movw	r22, r26
 66a:	ef 01       	movw	r28, r30
 66c:	df 01       	movw	r26, r30
 66e:	f8 01       	movw	r30, r16
 670:	db cf       	rjmp	.-74     	; 0x628 <malloc+0x22>
 672:	21 15       	cp	r18, r1
 674:	31 05       	cpc	r19, r1
 676:	f9 f0       	breq	.+62     	; 0x6b6 <malloc+0xb0>
 678:	28 1b       	sub	r18, r24
 67a:	39 0b       	sbc	r19, r25
 67c:	24 30       	cpi	r18, 0x04	; 4
 67e:	31 05       	cpc	r19, r1
 680:	80 f4       	brcc	.+32     	; 0x6a2 <malloc+0x9c>
 682:	8a 81       	ldd	r24, Y+2	; 0x02
 684:	9b 81       	ldd	r25, Y+3	; 0x03
 686:	61 15       	cp	r22, r1
 688:	71 05       	cpc	r23, r1
 68a:	21 f0       	breq	.+8      	; 0x694 <malloc+0x8e>
 68c:	fb 01       	movw	r30, r22
 68e:	93 83       	std	Z+3, r25	; 0x03
 690:	82 83       	std	Z+2, r24	; 0x02
 692:	04 c0       	rjmp	.+8      	; 0x69c <malloc+0x96>
 694:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <__flp+0x1>
 698:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <__flp>
 69c:	fe 01       	movw	r30, r28
 69e:	32 96       	adiw	r30, 0x02	; 2
 6a0:	44 c0       	rjmp	.+136    	; 0x72a <malloc+0x124>
 6a2:	fe 01       	movw	r30, r28
 6a4:	e2 0f       	add	r30, r18
 6a6:	f3 1f       	adc	r31, r19
 6a8:	81 93       	st	Z+, r24
 6aa:	91 93       	st	Z+, r25
 6ac:	22 50       	subi	r18, 0x02	; 2
 6ae:	31 09       	sbc	r19, r1
 6b0:	39 83       	std	Y+1, r19	; 0x01
 6b2:	28 83       	st	Y, r18
 6b4:	3a c0       	rjmp	.+116    	; 0x72a <malloc+0x124>
 6b6:	20 91 56 02 	lds	r18, 0x0256	; 0x800256 <__brkval>
 6ba:	30 91 57 02 	lds	r19, 0x0257	; 0x800257 <__brkval+0x1>
 6be:	23 2b       	or	r18, r19
 6c0:	41 f4       	brne	.+16     	; 0x6d2 <malloc+0xcc>
 6c2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 6c6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 6ca:	30 93 57 02 	sts	0x0257, r19	; 0x800257 <__brkval+0x1>
 6ce:	20 93 56 02 	sts	0x0256, r18	; 0x800256 <__brkval>
 6d2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 6d6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 6da:	21 15       	cp	r18, r1
 6dc:	31 05       	cpc	r19, r1
 6de:	41 f4       	brne	.+16     	; 0x6f0 <malloc+0xea>
 6e0:	2d b7       	in	r18, 0x3d	; 61
 6e2:	3e b7       	in	r19, 0x3e	; 62
 6e4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 6e8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 6ec:	24 1b       	sub	r18, r20
 6ee:	35 0b       	sbc	r19, r21
 6f0:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <__brkval>
 6f4:	f0 91 57 02 	lds	r31, 0x0257	; 0x800257 <__brkval+0x1>
 6f8:	e2 17       	cp	r30, r18
 6fa:	f3 07       	cpc	r31, r19
 6fc:	a0 f4       	brcc	.+40     	; 0x726 <malloc+0x120>
 6fe:	2e 1b       	sub	r18, r30
 700:	3f 0b       	sbc	r19, r31
 702:	28 17       	cp	r18, r24
 704:	39 07       	cpc	r19, r25
 706:	78 f0       	brcs	.+30     	; 0x726 <malloc+0x120>
 708:	ac 01       	movw	r20, r24
 70a:	4e 5f       	subi	r20, 0xFE	; 254
 70c:	5f 4f       	sbci	r21, 0xFF	; 255
 70e:	24 17       	cp	r18, r20
 710:	35 07       	cpc	r19, r21
 712:	48 f0       	brcs	.+18     	; 0x726 <malloc+0x120>
 714:	4e 0f       	add	r20, r30
 716:	5f 1f       	adc	r21, r31
 718:	50 93 57 02 	sts	0x0257, r21	; 0x800257 <__brkval+0x1>
 71c:	40 93 56 02 	sts	0x0256, r20	; 0x800256 <__brkval>
 720:	81 93       	st	Z+, r24
 722:	91 93       	st	Z+, r25
 724:	02 c0       	rjmp	.+4      	; 0x72a <malloc+0x124>
 726:	e0 e0       	ldi	r30, 0x00	; 0
 728:	f0 e0       	ldi	r31, 0x00	; 0
 72a:	cf 01       	movw	r24, r30
 72c:	df 91       	pop	r29
 72e:	cf 91       	pop	r28
 730:	1f 91       	pop	r17
 732:	0f 91       	pop	r16
 734:	08 95       	ret

00000736 <free>:
 736:	cf 93       	push	r28
 738:	df 93       	push	r29
 73a:	00 97       	sbiw	r24, 0x00	; 0
 73c:	09 f4       	brne	.+2      	; 0x740 <free+0xa>
 73e:	81 c0       	rjmp	.+258    	; 0x842 <free+0x10c>
 740:	fc 01       	movw	r30, r24
 742:	32 97       	sbiw	r30, 0x02	; 2
 744:	13 82       	std	Z+3, r1	; 0x03
 746:	12 82       	std	Z+2, r1	; 0x02
 748:	a0 91 58 02 	lds	r26, 0x0258	; 0x800258 <__flp>
 74c:	b0 91 59 02 	lds	r27, 0x0259	; 0x800259 <__flp+0x1>
 750:	10 97       	sbiw	r26, 0x00	; 0
 752:	81 f4       	brne	.+32     	; 0x774 <free+0x3e>
 754:	20 81       	ld	r18, Z
 756:	31 81       	ldd	r19, Z+1	; 0x01
 758:	82 0f       	add	r24, r18
 75a:	93 1f       	adc	r25, r19
 75c:	20 91 56 02 	lds	r18, 0x0256	; 0x800256 <__brkval>
 760:	30 91 57 02 	lds	r19, 0x0257	; 0x800257 <__brkval+0x1>
 764:	28 17       	cp	r18, r24
 766:	39 07       	cpc	r19, r25
 768:	51 f5       	brne	.+84     	; 0x7be <free+0x88>
 76a:	f0 93 57 02 	sts	0x0257, r31	; 0x800257 <__brkval+0x1>
 76e:	e0 93 56 02 	sts	0x0256, r30	; 0x800256 <__brkval>
 772:	67 c0       	rjmp	.+206    	; 0x842 <free+0x10c>
 774:	ed 01       	movw	r28, r26
 776:	20 e0       	ldi	r18, 0x00	; 0
 778:	30 e0       	ldi	r19, 0x00	; 0
 77a:	ce 17       	cp	r28, r30
 77c:	df 07       	cpc	r29, r31
 77e:	40 f4       	brcc	.+16     	; 0x790 <free+0x5a>
 780:	4a 81       	ldd	r20, Y+2	; 0x02
 782:	5b 81       	ldd	r21, Y+3	; 0x03
 784:	9e 01       	movw	r18, r28
 786:	41 15       	cp	r20, r1
 788:	51 05       	cpc	r21, r1
 78a:	f1 f0       	breq	.+60     	; 0x7c8 <free+0x92>
 78c:	ea 01       	movw	r28, r20
 78e:	f5 cf       	rjmp	.-22     	; 0x77a <free+0x44>
 790:	d3 83       	std	Z+3, r29	; 0x03
 792:	c2 83       	std	Z+2, r28	; 0x02
 794:	40 81       	ld	r20, Z
 796:	51 81       	ldd	r21, Z+1	; 0x01
 798:	84 0f       	add	r24, r20
 79a:	95 1f       	adc	r25, r21
 79c:	c8 17       	cp	r28, r24
 79e:	d9 07       	cpc	r29, r25
 7a0:	59 f4       	brne	.+22     	; 0x7b8 <free+0x82>
 7a2:	88 81       	ld	r24, Y
 7a4:	99 81       	ldd	r25, Y+1	; 0x01
 7a6:	84 0f       	add	r24, r20
 7a8:	95 1f       	adc	r25, r21
 7aa:	02 96       	adiw	r24, 0x02	; 2
 7ac:	91 83       	std	Z+1, r25	; 0x01
 7ae:	80 83       	st	Z, r24
 7b0:	8a 81       	ldd	r24, Y+2	; 0x02
 7b2:	9b 81       	ldd	r25, Y+3	; 0x03
 7b4:	93 83       	std	Z+3, r25	; 0x03
 7b6:	82 83       	std	Z+2, r24	; 0x02
 7b8:	21 15       	cp	r18, r1
 7ba:	31 05       	cpc	r19, r1
 7bc:	29 f4       	brne	.+10     	; 0x7c8 <free+0x92>
 7be:	f0 93 59 02 	sts	0x0259, r31	; 0x800259 <__flp+0x1>
 7c2:	e0 93 58 02 	sts	0x0258, r30	; 0x800258 <__flp>
 7c6:	3d c0       	rjmp	.+122    	; 0x842 <free+0x10c>
 7c8:	e9 01       	movw	r28, r18
 7ca:	fb 83       	std	Y+3, r31	; 0x03
 7cc:	ea 83       	std	Y+2, r30	; 0x02
 7ce:	49 91       	ld	r20, Y+
 7d0:	59 91       	ld	r21, Y+
 7d2:	c4 0f       	add	r28, r20
 7d4:	d5 1f       	adc	r29, r21
 7d6:	ec 17       	cp	r30, r28
 7d8:	fd 07       	cpc	r31, r29
 7da:	61 f4       	brne	.+24     	; 0x7f4 <free+0xbe>
 7dc:	80 81       	ld	r24, Z
 7de:	91 81       	ldd	r25, Z+1	; 0x01
 7e0:	84 0f       	add	r24, r20
 7e2:	95 1f       	adc	r25, r21
 7e4:	02 96       	adiw	r24, 0x02	; 2
 7e6:	e9 01       	movw	r28, r18
 7e8:	99 83       	std	Y+1, r25	; 0x01
 7ea:	88 83       	st	Y, r24
 7ec:	82 81       	ldd	r24, Z+2	; 0x02
 7ee:	93 81       	ldd	r25, Z+3	; 0x03
 7f0:	9b 83       	std	Y+3, r25	; 0x03
 7f2:	8a 83       	std	Y+2, r24	; 0x02
 7f4:	e0 e0       	ldi	r30, 0x00	; 0
 7f6:	f0 e0       	ldi	r31, 0x00	; 0
 7f8:	12 96       	adiw	r26, 0x02	; 2
 7fa:	8d 91       	ld	r24, X+
 7fc:	9c 91       	ld	r25, X
 7fe:	13 97       	sbiw	r26, 0x03	; 3
 800:	00 97       	sbiw	r24, 0x00	; 0
 802:	19 f0       	breq	.+6      	; 0x80a <free+0xd4>
 804:	fd 01       	movw	r30, r26
 806:	dc 01       	movw	r26, r24
 808:	f7 cf       	rjmp	.-18     	; 0x7f8 <free+0xc2>
 80a:	8d 91       	ld	r24, X+
 80c:	9c 91       	ld	r25, X
 80e:	11 97       	sbiw	r26, 0x01	; 1
 810:	9d 01       	movw	r18, r26
 812:	2e 5f       	subi	r18, 0xFE	; 254
 814:	3f 4f       	sbci	r19, 0xFF	; 255
 816:	82 0f       	add	r24, r18
 818:	93 1f       	adc	r25, r19
 81a:	20 91 56 02 	lds	r18, 0x0256	; 0x800256 <__brkval>
 81e:	30 91 57 02 	lds	r19, 0x0257	; 0x800257 <__brkval+0x1>
 822:	28 17       	cp	r18, r24
 824:	39 07       	cpc	r19, r25
 826:	69 f4       	brne	.+26     	; 0x842 <free+0x10c>
 828:	30 97       	sbiw	r30, 0x00	; 0
 82a:	29 f4       	brne	.+10     	; 0x836 <free+0x100>
 82c:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <__flp+0x1>
 830:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <__flp>
 834:	02 c0       	rjmp	.+4      	; 0x83a <free+0x104>
 836:	13 82       	std	Z+3, r1	; 0x03
 838:	12 82       	std	Z+2, r1	; 0x02
 83a:	b0 93 57 02 	sts	0x0257, r27	; 0x800257 <__brkval+0x1>
 83e:	a0 93 56 02 	sts	0x0256, r26	; 0x800256 <__brkval>
 842:	df 91       	pop	r29
 844:	cf 91       	pop	r28
 846:	08 95       	ret

00000848 <memset>:
 848:	dc 01       	movw	r26, r24
 84a:	01 c0       	rjmp	.+2      	; 0x84e <memset+0x6>
 84c:	6d 93       	st	X+, r22
 84e:	41 50       	subi	r20, 0x01	; 1
 850:	50 40       	sbci	r21, 0x00	; 0
 852:	e0 f7       	brcc	.-8      	; 0x84c <memset+0x4>
 854:	08 95       	ret

00000856 <fgetc>:
 856:	cf 93       	push	r28
 858:	df 93       	push	r29
 85a:	ec 01       	movw	r28, r24
 85c:	2b 81       	ldd	r18, Y+3	; 0x03
 85e:	20 ff       	sbrs	r18, 0
 860:	33 c0       	rjmp	.+102    	; 0x8c8 <fgetc+0x72>
 862:	26 ff       	sbrs	r18, 6
 864:	0a c0       	rjmp	.+20     	; 0x87a <fgetc+0x24>
 866:	2f 7b       	andi	r18, 0xBF	; 191
 868:	2b 83       	std	Y+3, r18	; 0x03
 86a:	8e 81       	ldd	r24, Y+6	; 0x06
 86c:	9f 81       	ldd	r25, Y+7	; 0x07
 86e:	01 96       	adiw	r24, 0x01	; 1
 870:	9f 83       	std	Y+7, r25	; 0x07
 872:	8e 83       	std	Y+6, r24	; 0x06
 874:	8a 81       	ldd	r24, Y+2	; 0x02
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	29 c0       	rjmp	.+82     	; 0x8cc <fgetc+0x76>
 87a:	22 ff       	sbrs	r18, 2
 87c:	0f c0       	rjmp	.+30     	; 0x89c <fgetc+0x46>
 87e:	e8 81       	ld	r30, Y
 880:	f9 81       	ldd	r31, Y+1	; 0x01
 882:	80 81       	ld	r24, Z
 884:	08 2e       	mov	r0, r24
 886:	00 0c       	add	r0, r0
 888:	99 0b       	sbc	r25, r25
 88a:	00 97       	sbiw	r24, 0x00	; 0
 88c:	19 f4       	brne	.+6      	; 0x894 <fgetc+0x3e>
 88e:	20 62       	ori	r18, 0x20	; 32
 890:	2b 83       	std	Y+3, r18	; 0x03
 892:	1a c0       	rjmp	.+52     	; 0x8c8 <fgetc+0x72>
 894:	31 96       	adiw	r30, 0x01	; 1
 896:	f9 83       	std	Y+1, r31	; 0x01
 898:	e8 83       	st	Y, r30
 89a:	0e c0       	rjmp	.+28     	; 0x8b8 <fgetc+0x62>
 89c:	ea 85       	ldd	r30, Y+10	; 0x0a
 89e:	fb 85       	ldd	r31, Y+11	; 0x0b
 8a0:	09 95       	icall
 8a2:	97 ff       	sbrs	r25, 7
 8a4:	09 c0       	rjmp	.+18     	; 0x8b8 <fgetc+0x62>
 8a6:	2b 81       	ldd	r18, Y+3	; 0x03
 8a8:	01 96       	adiw	r24, 0x01	; 1
 8aa:	11 f0       	breq	.+4      	; 0x8b0 <fgetc+0x5a>
 8ac:	80 e2       	ldi	r24, 0x20	; 32
 8ae:	01 c0       	rjmp	.+2      	; 0x8b2 <fgetc+0x5c>
 8b0:	80 e1       	ldi	r24, 0x10	; 16
 8b2:	82 2b       	or	r24, r18
 8b4:	8b 83       	std	Y+3, r24	; 0x03
 8b6:	08 c0       	rjmp	.+16     	; 0x8c8 <fgetc+0x72>
 8b8:	2e 81       	ldd	r18, Y+6	; 0x06
 8ba:	3f 81       	ldd	r19, Y+7	; 0x07
 8bc:	2f 5f       	subi	r18, 0xFF	; 255
 8be:	3f 4f       	sbci	r19, 0xFF	; 255
 8c0:	3f 83       	std	Y+7, r19	; 0x07
 8c2:	2e 83       	std	Y+6, r18	; 0x06
 8c4:	99 27       	eor	r25, r25
 8c6:	02 c0       	rjmp	.+4      	; 0x8cc <fgetc+0x76>
 8c8:	8f ef       	ldi	r24, 0xFF	; 255
 8ca:	9f ef       	ldi	r25, 0xFF	; 255
 8cc:	df 91       	pop	r29
 8ce:	cf 91       	pop	r28
 8d0:	08 95       	ret

000008d2 <_exit>:
 8d2:	f8 94       	cli

000008d4 <__stop_program>:
 8d4:	ff cf       	rjmp	.-2      	; 0x8d4 <__stop_program>
