
MyProject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010c  00800100  00000994  00000a28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000994  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003e  0080020c  0080020c  00000b34  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b34  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b52  00000000  00000000  00000cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011bb  00000000  00000000  0000280e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016aa  00000000  00000000  000039c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000027c  00000000  00000000  00005074  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000b43a  00000000  00000000  000052f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a61  00000000  00000000  0001072a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0001118b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000047a9  00000000  00000000  0001126b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	3d c0       	rjmp	.+122    	; 0x7c <__ctors_end>
   2:	00 00       	nop
   4:	56 c0       	rjmp	.+172    	; 0xb2 <__bad_interrupt>
   6:	00 00       	nop
   8:	54 c0       	rjmp	.+168    	; 0xb2 <__bad_interrupt>
   a:	00 00       	nop
   c:	52 c0       	rjmp	.+164    	; 0xb2 <__bad_interrupt>
   e:	00 00       	nop
  10:	50 c0       	rjmp	.+160    	; 0xb2 <__bad_interrupt>
  12:	00 00       	nop
  14:	4e c0       	rjmp	.+156    	; 0xb2 <__bad_interrupt>
  16:	00 00       	nop
  18:	4c c0       	rjmp	.+152    	; 0xb2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4a c0       	rjmp	.+148    	; 0xb2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	48 c0       	rjmp	.+144    	; 0xb2 <__bad_interrupt>
  22:	00 00       	nop
  24:	46 c0       	rjmp	.+140    	; 0xb2 <__bad_interrupt>
  26:	00 00       	nop
  28:	44 c0       	rjmp	.+136    	; 0xb2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	42 c0       	rjmp	.+132    	; 0xb2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	40 c0       	rjmp	.+128    	; 0xb2 <__bad_interrupt>
  32:	00 00       	nop
  34:	3e c0       	rjmp	.+124    	; 0xb2 <__bad_interrupt>
  36:	00 00       	nop
  38:	3c c0       	rjmp	.+120    	; 0xb2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3a c0       	rjmp	.+116    	; 0xb2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	38 c0       	rjmp	.+112    	; 0xb2 <__bad_interrupt>
  42:	00 00       	nop
  44:	36 c0       	rjmp	.+108    	; 0xb2 <__bad_interrupt>
  46:	00 00       	nop
  48:	34 c0       	rjmp	.+104    	; 0xb2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	32 c0       	rjmp	.+100    	; 0xb2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	7c c1       	rjmp	.+760    	; 0x34a <__vector_20>
  52:	00 00       	nop
  54:	2e c0       	rjmp	.+92     	; 0xb2 <__bad_interrupt>
  56:	00 00       	nop
  58:	2c c0       	rjmp	.+88     	; 0xb2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2a c0       	rjmp	.+84     	; 0xb2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	28 c0       	rjmp	.+80     	; 0xb2 <__bad_interrupt>
  62:	00 00       	nop
  64:	26 c0       	rjmp	.+76     	; 0xb2 <__bad_interrupt>
  66:	00 00       	nop
  68:	24 c0       	rjmp	.+72     	; 0xb2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	22 c0       	rjmp	.+68     	; 0xb2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	20 c0       	rjmp	.+64     	; 0xb2 <__bad_interrupt>
  72:	00 00       	nop
  74:	1e c0       	rjmp	.+60     	; 0xb2 <__bad_interrupt>
  76:	00 00       	nop
  78:	1c c0       	rjmp	.+56     	; 0xb2 <__bad_interrupt>
	...

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d4 e0       	ldi	r29, 0x04	; 4
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	12 e0       	ldi	r17, 0x02	; 2
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e4 e9       	ldi	r30, 0x94	; 148
  90:	f9 e0       	ldi	r31, 0x09	; 9
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	ac 30       	cpi	r26, 0x0C	; 12
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	22 e0       	ldi	r18, 0x02	; 2
  a0:	ac e0       	ldi	r26, 0x0C	; 12
  a2:	b2 e0       	ldi	r27, 0x02	; 2
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	aa 34       	cpi	r26, 0x4A	; 74
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	2c d0       	rcall	.+88     	; 0x108 <main>
  b0:	6f c4       	rjmp	.+2270   	; 0x990 <_exit>

000000b2 <__bad_interrupt>:
  b2:	a6 cf       	rjmp	.-180    	; 0x0 <__vectors>

000000b4 <can_clear_all_mob>:

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	ad ee       	ldi	r26, 0xED	; 237
  b8:	b0 e0       	ldi	r27, 0x00	; 0
  ba:	98 2f       	mov	r25, r24
  bc:	92 95       	swap	r25
  be:	90 7f       	andi	r25, 0xF0	; 240
  c0:	9c 93       	st	X, r25
  c2:	ee ee       	ldi	r30, 0xEE	; 238
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	11 92       	st	Z+, r1
  c8:	e8 3f       	cpi	r30, 0xF8	; 248
  ca:	f1 05       	cpc	r31, r1
  cc:	e1 f7       	brne	.-8      	; 0xc6 <can_clear_all_mob+0x12>
  ce:	8f 5f       	subi	r24, 0xFF	; 255
  d0:	86 30       	cpi	r24, 0x06	; 6
  d2:	99 f7       	brne	.-26     	; 0xba <can_clear_all_mob+0x6>
  d4:	08 95       	ret

000000d6 <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
    Can_reset();
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    Can_conf_bt();
  dc:	8e e0       	ldi	r24, 0x0E	; 14
  de:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
  e2:	8c e0       	ldi	r24, 0x0C	; 12
  e4:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
  e8:	87 e3       	ldi	r24, 0x37	; 55
  ea:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    return 1;
}
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	08 95       	ret

000000f2 <can_init>:
//!         ==0: research of bit timing configuration failed
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
  f2:	f1 df       	rcall	.-30     	; 0xd6 <can_fixed_baudrate>
  f4:	88 23       	and	r24, r24
  f6:	39 f0       	breq	.+14     	; 0x106 <can_init+0x14>
  f8:	dd df       	rcall	.-70     	; 0xb4 <can_clear_all_mob>
  fa:	e8 ed       	ldi	r30, 0xD8	; 216
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	82 60       	ori	r24, 0x02	; 2
 102:	80 83       	st	Z, r24
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	08 95       	ret

00000108 <main>:
uint8_t can_buffer_rx[CAN_BUFFER_SIZE];



int main(void)
{
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	cd b7       	in	r28, 0x3d	; 61
 10e:	de b7       	in	r29, 0x3e	; 62
 110:	28 97       	sbiw	r28, 0x08	; 8
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	f8 94       	cli
 116:	de bf       	out	0x3e, r29	; 62
 118:	0f be       	out	0x3f, r0	; 63
 11a:	cd bf       	out	0x3d, r28	; 61
	uart_init(9600);
 11c:	80 e8       	ldi	r24, 0x80	; 128
 11e:	95 e2       	ldi	r25, 0x25	; 37
 120:	57 d1       	rcall	.+686    	; 0x3d0 <uart_init>
	fdevopen(&uart_putc, NULL);
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	82 e1       	ldi	r24, 0x12	; 18
 128:	92 e0       	ldi	r25, 0x02	; 2
 12a:	d8 d1       	rcall	.+944    	; 0x4dc <fdevopen>
	fdevopen((int (*)(char,  struct __file *))&uart_getc, NULL);
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	8b e2       	ldi	r24, 0x2B	; 43
 132:	92 e0       	ldi	r25, 0x02	; 2
	can_init(0);
 134:	d3 d1       	rcall	.+934    	; 0x4dc <fdevopen>
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	dc df       	rcall	.-72     	; 0xf2 <can_init>
	CANGIE |= (1 << ENIT);
 13a:	eb ed       	ldi	r30, 0xDB	; 219
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	80 68       	ori	r24, 0x80	; 128
 142:	80 83       	st	Z, r24
	sei();
 144:	78 94       	sei
	
	can_buffer_rx[0] = 0x00; //Byte 0
 146:	ec e2       	ldi	r30, 0x2C	; 44
 148:	f2 e0       	ldi	r31, 0x02	; 2
 14a:	10 82       	st	Z, r1
	can_buffer_rx[1] = 0x00; //Software throttle
 14c:	11 82       	std	Z+1, r1	; 0x01
	can_buffer_rx[2] = 0x00;
 14e:	12 82       	std	Z+2, r1	; 0x02
	can_buffer_rx[3] = 0x00;
 150:	13 82       	std	Z+3, r1	; 0x03
	can_buffer_rx[4] = 0x00;
 152:	14 82       	std	Z+4, r1	; 0x04
	can_buffer_rx[5] = 0x00;
 154:	15 82       	std	Z+5, r1	; 0x05
	can_buffer_rx[6] = 0x00;
 156:	16 82       	std	Z+6, r1	; 0x06
	can_buffer_rx[7] = 0x00;
 158:	17 82       	std	Z+7, r1	; 0x07
	
	//Can_config_rx();
	//Can_config_rx_buffer();
	//can_get_data(0x200);
	
	rx_conf.pt_data = &can_buffer_rx[0];
 15a:	ac e0       	ldi	r26, 0x0C	; 12
 15c:	b2 e0       	ldi	r27, 0x02	; 2
 15e:	18 96       	adiw	r26, 0x08	; 8
 160:	fc 93       	st	X, r31
 162:	ee 93       	st	-X, r30
 164:	17 97       	sbiw	r26, 0x07	; 7
	rx_conf.ctrl.ide = 0;
 166:	1b 96       	adiw	r26, 0x0b	; 11
 168:	1c 92       	st	X, r1
 16a:	1b 97       	sbiw	r26, 0x0b	; 11
	rx_conf.dlc = 8;//
 16c:	28 e0       	ldi	r18, 0x08	; 8
 16e:	16 96       	adiw	r26, 0x06	; 6
 170:	2c 93       	st	X, r18
 172:	16 97       	sbiw	r26, 0x06	; 6
	//rx_conf.ctrl.rtr = 0;
	rx_conf.id.std = CAN_ID+1;//
 174:	81 e8       	ldi	r24, 0x81	; 129
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	13 96       	adiw	r26, 0x03	; 3
 17a:	9c 93       	st	X, r25
 17c:	8e 93       	st	-X, r24
 17e:	12 97       	sbiw	r26, 0x02	; 2
	//rx_conf.cmd = CMD_RX_DATA;
	rx_conf.cmd = CMD_RX_MASKED;
 180:	37 e0       	ldi	r19, 0x07	; 7
 182:	11 96       	adiw	r26, 0x01	; 1
 184:	3c 93       	st	X, r19

	//Setup receive message
	rx_rtr.pt_data = &can_buffer_rx[7];
 186:	e4 e3       	ldi	r30, 0x34	; 52
 188:	f2 e0       	ldi	r31, 0x02	; 2
 18a:	43 e3       	ldi	r20, 0x33	; 51
 18c:	52 e0       	ldi	r21, 0x02	; 2
 18e:	50 87       	std	Z+8, r21	; 0x08
 190:	47 83       	std	Z+7, r20	; 0x07
	rx_rtr.ctrl.ide = 0;
 192:	13 86       	std	Z+11, r1	; 0x0b
	rx_rtr.ctrl.rtr = 1;
 194:	31 e0       	ldi	r19, 0x01	; 1
 196:	32 87       	std	Z+10, r19	; 0x0a
	rx_rtr.dlc = 8;
 198:	26 83       	std	Z+6, r18	; 0x06
	rx_rtr.id.std = CAN_ID+1;
 19a:	93 83       	std	Z+3, r25	; 0x03
 19c:	82 83       	std	Z+2, r24	; 0x02
	rx_rtr.cmd = CMD_RX_REMOTE_MASKED;
 19e:	89 e0       	ldi	r24, 0x09	; 9
 1a0:	81 83       	std	Z+1, r24	; 0x01
	fgets(temp_buff, 8, stdin);
	printf("Good to meet you, %s. \n", temp_buff);
	*/
	while (1)
	{
		can_buffer_tx[0] = 0xFF; //Byte 0
 1a2:	04 e2       	ldi	r16, 0x24	; 36
 1a4:	12 e0       	ldi	r17, 0x02	; 2
 1a6:	22 24       	eor	r2, r2
 1a8:	2a 94       	dec	r2
		can_buffer_tx[1] = 0x55; //Physical throttle
 1aa:	0f 2e       	mov	r0, r31
 1ac:	f5 e5       	ldi	r31, 0x55	; 85
 1ae:	3f 2e       	mov	r3, r31
 1b0:	f0 2d       	mov	r31, r0
		can_buffer_tx[2] = 0x33; //Software throttle
 1b2:	0f 2e       	mov	r0, r31
 1b4:	f3 e3       	ldi	r31, 0x33	; 51
 1b6:	4f 2e       	mov	r4, r31
 1b8:	f0 2d       	mov	r31, r0
		can_buffer_tx[3] = 0x0F; //Current
 1ba:	0f 2e       	mov	r0, r31
 1bc:	ff e0       	ldi	r31, 0x0F	; 15
 1be:	5f 2e       	mov	r5, r31
 1c0:	f0 2d       	mov	r31, r0
		can_buffer_tx[4] = 0xF0; //Current
		can_buffer_tx[5] = 0x77; //Voltage
		can_buffer_tx[6] = 0xaa; //Voltage
		can_buffer_tx[7] = 0x9c; //Reserved
		
		tx_msg.pt_data = &can_buffer_tx[0];
 1c2:	0f 2e       	mov	r0, r31
 1c4:	f8 e1       	ldi	r31, 0x18	; 24
 1c6:	ef 2e       	mov	r14, r31
 1c8:	f2 e0       	ldi	r31, 0x02	; 2
 1ca:	ff 2e       	mov	r15, r31
 1cc:	f0 2d       	mov	r31, r0
 1ce:	60 2e       	mov	r6, r16
 1d0:	71 2e       	mov	r7, r17
		tx_msg.ctrl.ide = 0;
		tx_msg.dlc = 7;
		tx_msg.id.std = 0x011;
 1d2:	0f 2e       	mov	r0, r31
 1d4:	f1 e1       	ldi	r31, 0x11	; 17
 1d6:	8f 2e       	mov	r8, r31
 1d8:	91 2c       	mov	r9, r1
 1da:	f0 2d       	mov	r31, r0
			can_msg = can_buffer_tx[i];
			sprintf(temp_buff, "%x", can_msg);
			puts(temp_buff);
		}*/
		
		fgets(temp_buff, 8, stdin);
 1dc:	0f 2e       	mov	r0, r31
 1de:	f0 e4       	ldi	r31, 0x40	; 64
 1e0:	af 2e       	mov	r10, r31
 1e2:	f2 e0       	ldi	r31, 0x02	; 2
 1e4:	bf 2e       	mov	r11, r31
 1e6:	f0 2d       	mov	r31, r0
 1e8:	ce 01       	movw	r24, r28
 1ea:	01 96       	adiw	r24, 0x01	; 1
 1ec:	6c 01       	movw	r12, r24
	fgets(temp_buff, 8, stdin);
	printf("Good to meet you, %s. \n", temp_buff);
	*/
	while (1)
	{
		can_buffer_tx[0] = 0xFF; //Byte 0
 1ee:	f8 01       	movw	r30, r16
 1f0:	20 82       	st	Z, r2
		can_buffer_tx[1] = 0x55; //Physical throttle
 1f2:	31 82       	std	Z+1, r3	; 0x01
		can_buffer_tx[2] = 0x33; //Software throttle
 1f4:	42 82       	std	Z+2, r4	; 0x02
		can_buffer_tx[3] = 0x0F; //Current
 1f6:	53 82       	std	Z+3, r5	; 0x03
		can_buffer_tx[4] = 0xF0; //Current
 1f8:	20 ef       	ldi	r18, 0xF0	; 240
 1fa:	24 83       	std	Z+4, r18	; 0x04
		can_buffer_tx[5] = 0x77; //Voltage
 1fc:	87 e7       	ldi	r24, 0x77	; 119
 1fe:	85 83       	std	Z+5, r24	; 0x05
		can_buffer_tx[6] = 0xaa; //Voltage
 200:	9a ea       	ldi	r25, 0xAA	; 170
 202:	96 83       	std	Z+6, r25	; 0x06
		can_buffer_tx[7] = 0x9c; //Reserved
 204:	8c e9       	ldi	r24, 0x9C	; 156
 206:	87 83       	std	Z+7, r24	; 0x07
		
		tx_msg.pt_data = &can_buffer_tx[0];
 208:	f7 01       	movw	r30, r14
 20a:	67 82       	std	Z+7, r6	; 0x07
 20c:	70 86       	std	Z+8, r7	; 0x08
		tx_msg.ctrl.ide = 0;
 20e:	13 86       	std	Z+11, r1	; 0x0b
		tx_msg.dlc = 7;
 210:	87 e0       	ldi	r24, 0x07	; 7
 212:	86 83       	std	Z+6, r24	; 0x06
		tx_msg.id.std = 0x011;
 214:	93 82       	std	Z+3, r9	; 0x03
 216:	82 82       	std	Z+2, r8	; 0x02
		tx_msg.cmd = CMD_TX_DATA;
 218:	82 e0       	ldi	r24, 0x02	; 2
 21a:	81 83       	std	Z+1, r24	; 0x01
			can_msg = can_buffer_tx[i];
			sprintf(temp_buff, "%x", can_msg);
			puts(temp_buff);
		}*/
		
		fgets(temp_buff, 8, stdin);
 21c:	f5 01       	movw	r30, r10
 21e:	40 81       	ld	r20, Z
 220:	51 81       	ldd	r21, Z+1	; 0x01
 222:	68 e0       	ldi	r22, 0x08	; 8
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	c6 01       	movw	r24, r12
 228:	a3 d1       	rcall	.+838    	; 0x570 <fgets>
		//puts(temp_buff);
		len = strlen(temp_buff);
 22a:	f6 01       	movw	r30, r12
 22c:	01 90       	ld	r0, Z+
 22e:	00 20       	and	r0, r0
 230:	e9 f7       	brne	.-6      	; 0x22c <main+0x124>
 232:	cf 01       	movw	r24, r30
		puts(len);
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	8c 19       	sub	r24, r12
 238:	9d 09       	sbc	r25, r13
 23a:	c3 d1       	rcall	.+902    	; 0x5c2 <puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23c:	ff ef       	ldi	r31, 0xFF	; 255
 23e:	29 e6       	ldi	r18, 0x69	; 105
 240:	88 e1       	ldi	r24, 0x18	; 24
 242:	f1 50       	subi	r31, 0x01	; 1
 244:	20 40       	sbci	r18, 0x00	; 0
 246:	80 40       	sbci	r24, 0x00	; 0
 248:	e1 f7       	brne	.-8      	; 0x242 <main+0x13a>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <main+0x144>
 24c:	00 00       	nop
 24e:	9f ef       	ldi	r25, 0xFF	; 255
 250:	e9 e6       	ldi	r30, 0x69	; 105
 252:	f8 e1       	ldi	r31, 0x18	; 24
 254:	91 50       	subi	r25, 0x01	; 1
 256:	e0 40       	sbci	r30, 0x00	; 0
 258:	f0 40       	sbci	r31, 0x00	; 0
 25a:	e1 f7       	brne	.-8      	; 0x254 <main+0x14c>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <main+0x156>
 25e:	00 00       	nop
 260:	2f ef       	ldi	r18, 0xFF	; 255
 262:	89 e6       	ldi	r24, 0x69	; 105
 264:	98 e1       	ldi	r25, 0x18	; 24
 266:	21 50       	subi	r18, 0x01	; 1
 268:	80 40       	sbci	r24, 0x00	; 0
 26a:	90 40       	sbci	r25, 0x00	; 0
 26c:	e1 f7       	brne	.-8      	; 0x266 <main+0x15e>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <main+0x168>
 270:	00 00       	nop
 272:	ef ef       	ldi	r30, 0xFF	; 255
 274:	f9 e6       	ldi	r31, 0x69	; 105
 276:	28 e1       	ldi	r18, 0x18	; 24
 278:	e1 50       	subi	r30, 0x01	; 1
 27a:	f0 40       	sbci	r31, 0x00	; 0
 27c:	20 40       	sbci	r18, 0x00	; 0
 27e:	e1 f7       	brne	.-8      	; 0x278 <main+0x170>
 280:	00 c0       	rjmp	.+0      	; 0x282 <main+0x17a>
 282:	00 00       	nop
 284:	b4 cf       	rjmp	.-152    	; 0x1ee <main+0xe6>

00000286 <buffer_write>:
	str[i] = '\0';
}

bool buffer_full(struct ringbuffer* buffer) {
	return ((buffer->head == buffer->tail) && !(buffer->empty));
}
 286:	fc 01       	movw	r30, r24
 288:	ee 57       	subi	r30, 0x7E	; 126
 28a:	ff 4f       	sbci	r31, 0xFF	; 255
 28c:	20 81       	ld	r18, Z
 28e:	22 23       	and	r18, r18
 290:	11 f0       	breq	.+4      	; 0x296 <buffer_write+0x10>
 292:	10 82       	st	Z, r1
 294:	16 c0       	rjmp	.+44     	; 0x2c2 <buffer_write+0x3c>
 296:	fc 01       	movw	r30, r24
 298:	e0 58       	subi	r30, 0x80	; 128
 29a:	ff 4f       	sbci	r31, 0xFF	; 255
 29c:	20 81       	ld	r18, Z
 29e:	31 96       	adiw	r30, 0x01	; 1
 2a0:	30 81       	ld	r19, Z
 2a2:	23 13       	cpse	r18, r19
 2a4:	0e c0       	rjmp	.+28     	; 0x2c2 <buffer_write+0x3c>
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	2f 5f       	subi	r18, 0xFF	; 255
 2aa:	3f 4f       	sbci	r19, 0xFF	; 255
 2ac:	2f 77       	andi	r18, 0x7F	; 127
 2ae:	30 78       	andi	r19, 0x80	; 128
 2b0:	33 23       	and	r19, r19
 2b2:	34 f4       	brge	.+12     	; 0x2c0 <buffer_write+0x3a>
 2b4:	21 50       	subi	r18, 0x01	; 1
 2b6:	31 09       	sbc	r19, r1
 2b8:	20 68       	ori	r18, 0x80	; 128
 2ba:	3f 6f       	ori	r19, 0xFF	; 255
 2bc:	2f 5f       	subi	r18, 0xFF	; 255
 2be:	3f 4f       	sbci	r19, 0xFF	; 255
 2c0:	20 83       	st	Z, r18
 2c2:	fc 01       	movw	r30, r24
 2c4:	e0 58       	subi	r30, 0x80	; 128
 2c6:	ff 4f       	sbci	r31, 0xFF	; 255
 2c8:	20 81       	ld	r18, Z
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	dc 01       	movw	r26, r24
 2ce:	a2 0f       	add	r26, r18
 2d0:	b3 1f       	adc	r27, r19
 2d2:	6c 93       	st	X, r22
 2d4:	c9 01       	movw	r24, r18
 2d6:	01 96       	adiw	r24, 0x01	; 1
 2d8:	8f 77       	andi	r24, 0x7F	; 127
 2da:	90 78       	andi	r25, 0x80	; 128
 2dc:	99 23       	and	r25, r25
 2de:	24 f4       	brge	.+8      	; 0x2e8 <buffer_write+0x62>
 2e0:	01 97       	sbiw	r24, 0x01	; 1
 2e2:	80 68       	ori	r24, 0x80	; 128
 2e4:	9f 6f       	ori	r25, 0xFF	; 255
 2e6:	01 96       	adiw	r24, 0x01	; 1
 2e8:	80 83       	st	Z, r24
 2ea:	08 95       	ret

000002ec <buffer_read>:
 2ec:	fc 01       	movw	r30, r24
 2ee:	ee 57       	subi	r30, 0x7E	; 126
 2f0:	ff 4f       	sbci	r31, 0xFF	; 255
 2f2:	20 81       	ld	r18, Z
 2f4:	21 11       	cpse	r18, r1
 2f6:	22 c0       	rjmp	.+68     	; 0x33c <buffer_read+0x50>
 2f8:	31 97       	sbiw	r30, 0x01	; 1
 2fa:	20 81       	ld	r18, Z
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	fc 01       	movw	r30, r24
 300:	e2 0f       	add	r30, r18
 302:	f3 1f       	adc	r31, r19
 304:	40 81       	ld	r20, Z
 306:	2f 5f       	subi	r18, 0xFF	; 255
 308:	3f 4f       	sbci	r19, 0xFF	; 255
 30a:	2f 77       	andi	r18, 0x7F	; 127
 30c:	30 78       	andi	r19, 0x80	; 128
 30e:	33 23       	and	r19, r19
 310:	34 f4       	brge	.+12     	; 0x31e <buffer_read+0x32>
 312:	21 50       	subi	r18, 0x01	; 1
 314:	31 09       	sbc	r19, r1
 316:	20 68       	ori	r18, 0x80	; 128
 318:	3f 6f       	ori	r19, 0xFF	; 255
 31a:	2f 5f       	subi	r18, 0xFF	; 255
 31c:	3f 4f       	sbci	r19, 0xFF	; 255
 31e:	fc 01       	movw	r30, r24
 320:	ef 57       	subi	r30, 0x7F	; 127
 322:	ff 4f       	sbci	r31, 0xFF	; 255
 324:	20 83       	st	Z, r18
 326:	dc 01       	movw	r26, r24
 328:	ae 57       	subi	r26, 0x7E	; 126
 32a:	bf 4f       	sbci	r27, 0xFF	; 255
 32c:	31 97       	sbiw	r30, 0x01	; 1
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	90 81       	ld	r25, Z
 332:	92 13       	cpse	r25, r18
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	8c 93       	st	X, r24
 338:	84 2f       	mov	r24, r20
 33a:	08 95       	ret
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	08 95       	ret

00000340 <buffer_empty>:


bool buffer_empty(struct ringbuffer* buffer) {
	return buffer->empty;
 340:	8e 57       	subi	r24, 0x7E	; 126
 342:	9f 4f       	sbci	r25, 0xFF	; 255
}
 344:	fc 01       	movw	r30, r24
 346:	80 81       	ld	r24, Z
 348:	08 95       	ret

0000034a <__vector_20>:

volatile struct ringbuffer tx_buffer = {{0}, 0, 0, true};
volatile struct ringbuffer rx_buffer = {{0}, 0, 0, true};

//Receive interrupt routine
ISR(LIN_TC_vect) {
 34a:	1f 92       	push	r1
 34c:	0f 92       	push	r0
 34e:	0f b6       	in	r0, 0x3f	; 63
 350:	0f 92       	push	r0
 352:	11 24       	eor	r1, r1
 354:	2f 93       	push	r18
 356:	3f 93       	push	r19
 358:	4f 93       	push	r20
 35a:	5f 93       	push	r21
 35c:	6f 93       	push	r22
 35e:	7f 93       	push	r23
 360:	8f 93       	push	r24
 362:	9f 93       	push	r25
 364:	af 93       	push	r26
 366:	bf 93       	push	r27
 368:	ef 93       	push	r30
 36a:	ff 93       	push	r31
	if(LINSIR & (1 << LRXOK)) {
 36c:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
 370:	80 ff       	sbrs	r24, 0
 372:	0a c0       	rjmp	.+20     	; 0x388 <__vector_20+0x3e>
		//clear LRXOK
		LINSIR &= ~(1 << LRXOK);
 374:	e9 ec       	ldi	r30, 0xC9	; 201
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	80 81       	ld	r24, Z
 37a:	8e 7f       	andi	r24, 0xFE	; 254
 37c:	80 83       	st	Z, r24
		
		//write buffer
		uint8_t recv = LINDAT;
 37e:	60 91 d2 00 	lds	r22, 0x00D2	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7e00d2>
		buffer_write(&tx_buffer, recv);	
 382:	89 e8       	ldi	r24, 0x89	; 137
 384:	91 e0       	ldi	r25, 0x01	; 1
 386:	7f df       	rcall	.-258    	; 0x286 <buffer_write>
	}
	if(LINSIR & (1 << LTXOK)) {
 388:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
 38c:	81 ff       	sbrs	r24, 1
 38e:	0f c0       	rjmp	.+30     	; 0x3ae <__vector_20+0x64>
		//clear LTXOK
		//LINSIR &= ~(1 << LTXOK);
		uint8_t data = buffer_read(&tx_buffer); 
 390:	89 e8       	ldi	r24, 0x89	; 137
 392:	91 e0       	ldi	r25, 0x01	; 1
 394:	ab df       	rcall	.-170    	; 0x2ec <buffer_read>
		LINDAT = data;
 396:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7e00d2>
		
		if(buffer_empty(&tx_buffer)) {
 39a:	89 e8       	ldi	r24, 0x89	; 137
 39c:	91 e0       	ldi	r25, 0x01	; 1
 39e:	d0 df       	rcall	.-96     	; 0x340 <buffer_empty>
 3a0:	88 23       	and	r24, r24
			LINENIR  &= ~(1 << LENTXOK);
 3a2:	29 f0       	breq	.+10     	; 0x3ae <__vector_20+0x64>
 3a4:	ea ec       	ldi	r30, 0xCA	; 202
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	80 81       	ld	r24, Z
 3aa:	8d 7f       	andi	r24, 0xFD	; 253
		}
	}
}
 3ac:	80 83       	st	Z, r24
 3ae:	ff 91       	pop	r31
 3b0:	ef 91       	pop	r30
 3b2:	bf 91       	pop	r27
 3b4:	af 91       	pop	r26
 3b6:	9f 91       	pop	r25
 3b8:	8f 91       	pop	r24
 3ba:	7f 91       	pop	r23
 3bc:	6f 91       	pop	r22
 3be:	5f 91       	pop	r21
 3c0:	4f 91       	pop	r20
 3c2:	3f 91       	pop	r19
 3c4:	2f 91       	pop	r18
 3c6:	0f 90       	pop	r0
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	0f 90       	pop	r0
 3cc:	1f 90       	pop	r1
 3ce:	18 95       	reti

000003d0 <uart_init>:


void uart_init(uint16_t baud){
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
	//Reset LIN/UART hardware
	LINCR = (1 << LSWRES);
 3d4:	c8 ec       	ldi	r28, 0xC8	; 200
 3d6:	d0 e0       	ldi	r29, 0x00	; 0
 3d8:	20 e8       	ldi	r18, 0x80	; 128
 3da:	28 83       	st	Y, r18
	
	//Calculate, and set UART baud rate
	LINBRRH = (((F_CPU / baud) / 16) - 1) >> 8;
 3dc:	9c 01       	movw	r18, r24
 3de:	40 e0       	ldi	r20, 0x00	; 0
 3e0:	50 e0       	ldi	r21, 0x00	; 0
 3e2:	60 e4       	ldi	r22, 0x40	; 64
 3e4:	72 e4       	ldi	r23, 0x42	; 66
 3e6:	8f e0       	ldi	r24, 0x0F	; 15
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	3a d0       	rcall	.+116    	; 0x460 <__divmodsi4>
 3ec:	da 01       	movw	r26, r20
 3ee:	c9 01       	movw	r24, r18
 3f0:	01 97       	sbiw	r24, 0x01	; 1
 3f2:	a1 09       	sbc	r26, r1
 3f4:	b1 09       	sbc	r27, r1
 3f6:	89 2f       	mov	r24, r25
 3f8:	9a 2f       	mov	r25, r26
 3fa:	ab 2f       	mov	r26, r27
 3fc:	bb 27       	eor	r27, r27
 3fe:	a7 fd       	sbrc	r26, 7
 400:	ba 95       	dec	r27
 402:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	LINBRRL = (((F_CPU / baud) / 16) - 1);
 406:	21 50       	subi	r18, 0x01	; 1
 408:	20 93 cd 00 	sts	0x00CD, r18	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	
	//Bit sampling rate/re-sync
	LINBTR = (1 << LDISR) | (16 << LBT0);
 40c:	80 e9       	ldi	r24, 0x90	; 144
 40e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

	//RX interrupt
	LINENIR = (1 << LENRXOK);
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>

	//Enable UART RX & TX
	LINCR = (1 << LENA) | (1 << LCMD2) | (1 << LCMD1) | (1 << LCMD0);
 418:	8f e0       	ldi	r24, 0x0F	; 15
 41a:	88 83       	st	Y, r24

	sei();
 41c:	78 94       	sei
}
 41e:	df 91       	pop	r29
 420:	cf 91       	pop	r28
 422:	08 95       	ret

00000424 <uart_putc>:
			
int uart_putc(char data, FILE* file) {
 424:	cf 93       	push	r28
 426:	c8 2f       	mov	r28, r24
	cli();
 428:	f8 94       	cli
	//the the buffer was empty, enable tx interrupt
	if(!(LINENIR & (1 << LENTXOK))) {
 42a:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
 42e:	81 fd       	sbrc	r24, 1
 430:	08 c0       	rjmp	.+16     	; 0x442 <uart_putc+0x1e>
		LINENIR |= (1 << LENTXOK);
 432:	ea ec       	ldi	r30, 0xCA	; 202
 434:	f0 e0       	ldi	r31, 0x00	; 0
 436:	80 81       	ld	r24, Z
 438:	82 60       	ori	r24, 0x02	; 2
 43a:	80 83       	st	Z, r24
		LINDAT = data;
 43c:	c0 93 d2 00 	sts	0x00D2, r28	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7e00d2>
 440:	04 c0       	rjmp	.+8      	; 0x44a <uart_putc+0x26>
	}
	else {
		//add data to buffer
		buffer_write(&tx_buffer, data);
 442:	6c 2f       	mov	r22, r28
 444:	89 e8       	ldi	r24, 0x89	; 137
 446:	91 e0       	ldi	r25, 0x01	; 1
 448:	1e df       	rcall	.-452    	; 0x286 <buffer_write>
	}
	sei();
 44a:	78 94       	sei
	return data;
}
 44c:	8c 2f       	mov	r24, r28
 44e:	cc 0f       	add	r28, r28
 450:	99 0b       	sbc	r25, r25
 452:	cf 91       	pop	r28
 454:	08 95       	ret

00000456 <uart_getc>:

uint8_t uart_getc(FILE* file) {
	cli();
 456:	f8 94       	cli
	//while(buffer_empty(&rx_buffer)); 
	return buffer_read(&rx_buffer);
 458:	86 e0       	ldi	r24, 0x06	; 6
 45a:	91 e0       	ldi	r25, 0x01	; 1
 45c:	47 cf       	rjmp	.-370    	; 0x2ec <buffer_read>
	sei();
 45e:	08 95       	ret

00000460 <__divmodsi4>:
 460:	05 2e       	mov	r0, r21
 462:	97 fb       	bst	r25, 7
 464:	16 f4       	brtc	.+4      	; 0x46a <__divmodsi4+0xa>
 466:	00 94       	com	r0
 468:	0f d0       	rcall	.+30     	; 0x488 <__negsi2>
 46a:	57 fd       	sbrc	r21, 7
 46c:	05 d0       	rcall	.+10     	; 0x478 <__divmodsi4_neg2>
 46e:	14 d0       	rcall	.+40     	; 0x498 <__udivmodsi4>
 470:	07 fc       	sbrc	r0, 7
 472:	02 d0       	rcall	.+4      	; 0x478 <__divmodsi4_neg2>
 474:	46 f4       	brtc	.+16     	; 0x486 <__divmodsi4_exit>
 476:	08 c0       	rjmp	.+16     	; 0x488 <__negsi2>

00000478 <__divmodsi4_neg2>:
 478:	50 95       	com	r21
 47a:	40 95       	com	r20
 47c:	30 95       	com	r19
 47e:	21 95       	neg	r18
 480:	3f 4f       	sbci	r19, 0xFF	; 255
 482:	4f 4f       	sbci	r20, 0xFF	; 255
 484:	5f 4f       	sbci	r21, 0xFF	; 255

00000486 <__divmodsi4_exit>:
 486:	08 95       	ret

00000488 <__negsi2>:
 488:	90 95       	com	r25
 48a:	80 95       	com	r24
 48c:	70 95       	com	r23
 48e:	61 95       	neg	r22
 490:	7f 4f       	sbci	r23, 0xFF	; 255
 492:	8f 4f       	sbci	r24, 0xFF	; 255
 494:	9f 4f       	sbci	r25, 0xFF	; 255
 496:	08 95       	ret

00000498 <__udivmodsi4>:
 498:	a1 e2       	ldi	r26, 0x21	; 33
 49a:	1a 2e       	mov	r1, r26
 49c:	aa 1b       	sub	r26, r26
 49e:	bb 1b       	sub	r27, r27
 4a0:	fd 01       	movw	r30, r26
 4a2:	0d c0       	rjmp	.+26     	; 0x4be <__udivmodsi4_ep>

000004a4 <__udivmodsi4_loop>:
 4a4:	aa 1f       	adc	r26, r26
 4a6:	bb 1f       	adc	r27, r27
 4a8:	ee 1f       	adc	r30, r30
 4aa:	ff 1f       	adc	r31, r31
 4ac:	a2 17       	cp	r26, r18
 4ae:	b3 07       	cpc	r27, r19
 4b0:	e4 07       	cpc	r30, r20
 4b2:	f5 07       	cpc	r31, r21
 4b4:	20 f0       	brcs	.+8      	; 0x4be <__udivmodsi4_ep>
 4b6:	a2 1b       	sub	r26, r18
 4b8:	b3 0b       	sbc	r27, r19
 4ba:	e4 0b       	sbc	r30, r20
 4bc:	f5 0b       	sbc	r31, r21

000004be <__udivmodsi4_ep>:
 4be:	66 1f       	adc	r22, r22
 4c0:	77 1f       	adc	r23, r23
 4c2:	88 1f       	adc	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	1a 94       	dec	r1
 4c8:	69 f7       	brne	.-38     	; 0x4a4 <__udivmodsi4_loop>
 4ca:	60 95       	com	r22
 4cc:	70 95       	com	r23
 4ce:	80 95       	com	r24
 4d0:	90 95       	com	r25
 4d2:	9b 01       	movw	r18, r22
 4d4:	ac 01       	movw	r20, r24
 4d6:	bd 01       	movw	r22, r26
 4d8:	cf 01       	movw	r24, r30
 4da:	08 95       	ret

000004dc <fdevopen>:
 4dc:	0f 93       	push	r16
 4de:	1f 93       	push	r17
 4e0:	cf 93       	push	r28
 4e2:	df 93       	push	r29
 4e4:	00 97       	sbiw	r24, 0x00	; 0
 4e6:	31 f4       	brne	.+12     	; 0x4f4 <fdevopen+0x18>
 4e8:	61 15       	cp	r22, r1
 4ea:	71 05       	cpc	r23, r1
 4ec:	19 f4       	brne	.+6      	; 0x4f4 <fdevopen+0x18>
 4ee:	80 e0       	ldi	r24, 0x00	; 0
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	39 c0       	rjmp	.+114    	; 0x566 <__stack+0x67>
 4f4:	8b 01       	movw	r16, r22
 4f6:	ec 01       	movw	r28, r24
 4f8:	6e e0       	ldi	r22, 0x0E	; 14
 4fa:	70 e0       	ldi	r23, 0x00	; 0
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	90 d0       	rcall	.+288    	; 0x622 <calloc>
 502:	fc 01       	movw	r30, r24
 504:	89 2b       	or	r24, r25
 506:	99 f3       	breq	.-26     	; 0x4ee <fdevopen+0x12>
 508:	80 e8       	ldi	r24, 0x80	; 128
 50a:	83 83       	std	Z+3, r24	; 0x03
 50c:	01 15       	cp	r16, r1
 50e:	11 05       	cpc	r17, r1
 510:	71 f0       	breq	.+28     	; 0x52e <__stack+0x2f>
 512:	13 87       	std	Z+11, r17	; 0x0b
 514:	02 87       	std	Z+10, r16	; 0x0a
 516:	81 e8       	ldi	r24, 0x81	; 129
 518:	83 83       	std	Z+3, r24	; 0x03
 51a:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <__iob>
 51e:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <__iob+0x1>
 522:	89 2b       	or	r24, r25
 524:	21 f4       	brne	.+8      	; 0x52e <__stack+0x2f>
 526:	f0 93 41 02 	sts	0x0241, r31	; 0x800241 <__iob+0x1>
 52a:	e0 93 40 02 	sts	0x0240, r30	; 0x800240 <__iob>
 52e:	20 97       	sbiw	r28, 0x00	; 0
 530:	c9 f0       	breq	.+50     	; 0x564 <__stack+0x65>
 532:	d1 87       	std	Z+9, r29	; 0x09
 534:	c0 87       	std	Z+8, r28	; 0x08
 536:	83 81       	ldd	r24, Z+3	; 0x03
 538:	82 60       	ori	r24, 0x02	; 2
 53a:	83 83       	std	Z+3, r24	; 0x03
 53c:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <__iob+0x2>
 540:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <__iob+0x3>
 544:	89 2b       	or	r24, r25
 546:	71 f4       	brne	.+28     	; 0x564 <__stack+0x65>
 548:	f0 93 43 02 	sts	0x0243, r31	; 0x800243 <__iob+0x3>
 54c:	e0 93 42 02 	sts	0x0242, r30	; 0x800242 <__iob+0x2>
 550:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <__iob+0x4>
 554:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <__iob+0x5>
 558:	89 2b       	or	r24, r25
 55a:	21 f4       	brne	.+8      	; 0x564 <__stack+0x65>
 55c:	f0 93 45 02 	sts	0x0245, r31	; 0x800245 <__iob+0x5>
 560:	e0 93 44 02 	sts	0x0244, r30	; 0x800244 <__iob+0x4>
 564:	cf 01       	movw	r24, r30
 566:	df 91       	pop	r29
 568:	cf 91       	pop	r28
 56a:	1f 91       	pop	r17
 56c:	0f 91       	pop	r16
 56e:	08 95       	ret

00000570 <fgets>:
 570:	a0 e0       	ldi	r26, 0x00	; 0
 572:	b0 e0       	ldi	r27, 0x00	; 0
 574:	ed eb       	ldi	r30, 0xBD	; 189
 576:	f2 e0       	ldi	r31, 0x02	; 2
 578:	de c1       	rjmp	.+956    	; 0x936 <__prologue_saves__+0x14>
 57a:	fa 01       	movw	r30, r20
 57c:	23 81       	ldd	r18, Z+3	; 0x03
 57e:	20 fd       	sbrc	r18, 0
 580:	03 c0       	rjmp	.+6      	; 0x588 <fgets+0x18>
 582:	80 e0       	ldi	r24, 0x00	; 0
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	19 c0       	rjmp	.+50     	; 0x5ba <fgets+0x4a>
 588:	16 16       	cp	r1, r22
 58a:	17 06       	cpc	r1, r23
 58c:	d4 f7       	brge	.-12     	; 0x582 <fgets+0x12>
 58e:	7a 01       	movw	r14, r20
 590:	8c 01       	movw	r16, r24
 592:	eb 01       	movw	r28, r22
 594:	6c 01       	movw	r12, r24
 596:	c1 30       	cpi	r28, 0x01	; 1
 598:	d1 05       	cpc	r29, r1
 59a:	61 f0       	breq	.+24     	; 0x5b4 <fgets+0x44>
 59c:	c7 01       	movw	r24, r14
 59e:	83 d1       	rcall	.+774    	; 0x8a6 <fgetc>
 5a0:	8f 3f       	cpi	r24, 0xFF	; 255
 5a2:	ff ef       	ldi	r31, 0xFF	; 255
 5a4:	9f 07       	cpc	r25, r31
 5a6:	69 f3       	breq	.-38     	; 0x582 <fgets+0x12>
 5a8:	f6 01       	movw	r30, r12
 5aa:	81 93       	st	Z+, r24
 5ac:	6f 01       	movw	r12, r30
 5ae:	21 97       	sbiw	r28, 0x01	; 1
 5b0:	0a 97       	sbiw	r24, 0x0a	; 10
 5b2:	89 f7       	brne	.-30     	; 0x596 <fgets+0x26>
 5b4:	f6 01       	movw	r30, r12
 5b6:	10 82       	st	Z, r1
 5b8:	c8 01       	movw	r24, r16
 5ba:	cd b7       	in	r28, 0x3d	; 61
 5bc:	de b7       	in	r29, 0x3e	; 62
 5be:	e8 e0       	ldi	r30, 0x08	; 8
 5c0:	d6 c1       	rjmp	.+940    	; 0x96e <__epilogue_restores__+0x14>

000005c2 <puts>:
 5c2:	0f 93       	push	r16
 5c4:	1f 93       	push	r17
 5c6:	cf 93       	push	r28
 5c8:	df 93       	push	r29
 5ca:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <__iob+0x2>
 5ce:	f0 91 43 02 	lds	r31, 0x0243	; 0x800243 <__iob+0x3>
 5d2:	23 81       	ldd	r18, Z+3	; 0x03
 5d4:	21 ff       	sbrs	r18, 1
 5d6:	1b c0       	rjmp	.+54     	; 0x60e <puts+0x4c>
 5d8:	8c 01       	movw	r16, r24
 5da:	d0 e0       	ldi	r29, 0x00	; 0
 5dc:	c0 e0       	ldi	r28, 0x00	; 0
 5de:	f8 01       	movw	r30, r16
 5e0:	81 91       	ld	r24, Z+
 5e2:	8f 01       	movw	r16, r30
 5e4:	60 91 42 02 	lds	r22, 0x0242	; 0x800242 <__iob+0x2>
 5e8:	70 91 43 02 	lds	r23, 0x0243	; 0x800243 <__iob+0x3>
 5ec:	db 01       	movw	r26, r22
 5ee:	18 96       	adiw	r26, 0x08	; 8
 5f0:	ed 91       	ld	r30, X+
 5f2:	fc 91       	ld	r31, X
 5f4:	19 97       	sbiw	r26, 0x09	; 9
 5f6:	88 23       	and	r24, r24
 5f8:	31 f0       	breq	.+12     	; 0x606 <puts+0x44>
 5fa:	09 95       	icall
 5fc:	89 2b       	or	r24, r25
 5fe:	79 f3       	breq	.-34     	; 0x5de <puts+0x1c>
 600:	df ef       	ldi	r29, 0xFF	; 255
 602:	cf ef       	ldi	r28, 0xFF	; 255
 604:	ec cf       	rjmp	.-40     	; 0x5de <puts+0x1c>
 606:	8a e0       	ldi	r24, 0x0A	; 10
 608:	09 95       	icall
 60a:	89 2b       	or	r24, r25
 60c:	19 f0       	breq	.+6      	; 0x614 <puts+0x52>
 60e:	8f ef       	ldi	r24, 0xFF	; 255
 610:	9f ef       	ldi	r25, 0xFF	; 255
 612:	02 c0       	rjmp	.+4      	; 0x618 <puts+0x56>
 614:	8d 2f       	mov	r24, r29
 616:	9c 2f       	mov	r25, r28
 618:	df 91       	pop	r29
 61a:	cf 91       	pop	r28
 61c:	1f 91       	pop	r17
 61e:	0f 91       	pop	r16
 620:	08 95       	ret

00000622 <calloc>:
 622:	0f 93       	push	r16
 624:	1f 93       	push	r17
 626:	cf 93       	push	r28
 628:	df 93       	push	r29
 62a:	86 9f       	mul	r24, r22
 62c:	80 01       	movw	r16, r0
 62e:	87 9f       	mul	r24, r23
 630:	10 0d       	add	r17, r0
 632:	96 9f       	mul	r25, r22
 634:	10 0d       	add	r17, r0
 636:	11 24       	eor	r1, r1
 638:	c8 01       	movw	r24, r16
 63a:	0d d0       	rcall	.+26     	; 0x656 <malloc>
 63c:	ec 01       	movw	r28, r24
 63e:	00 97       	sbiw	r24, 0x00	; 0
 640:	21 f0       	breq	.+8      	; 0x64a <calloc+0x28>
 642:	a8 01       	movw	r20, r16
 644:	60 e0       	ldi	r22, 0x00	; 0
 646:	70 e0       	ldi	r23, 0x00	; 0
 648:	27 d1       	rcall	.+590    	; 0x898 <memset>
 64a:	ce 01       	movw	r24, r28
 64c:	df 91       	pop	r29
 64e:	cf 91       	pop	r28
 650:	1f 91       	pop	r17
 652:	0f 91       	pop	r16
 654:	08 95       	ret

00000656 <malloc>:
 656:	0f 93       	push	r16
 658:	1f 93       	push	r17
 65a:	cf 93       	push	r28
 65c:	df 93       	push	r29
 65e:	82 30       	cpi	r24, 0x02	; 2
 660:	91 05       	cpc	r25, r1
 662:	10 f4       	brcc	.+4      	; 0x668 <malloc+0x12>
 664:	82 e0       	ldi	r24, 0x02	; 2
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	e0 91 48 02 	lds	r30, 0x0248	; 0x800248 <__flp>
 66c:	f0 91 49 02 	lds	r31, 0x0249	; 0x800249 <__flp+0x1>
 670:	20 e0       	ldi	r18, 0x00	; 0
 672:	30 e0       	ldi	r19, 0x00	; 0
 674:	a0 e0       	ldi	r26, 0x00	; 0
 676:	b0 e0       	ldi	r27, 0x00	; 0
 678:	30 97       	sbiw	r30, 0x00	; 0
 67a:	19 f1       	breq	.+70     	; 0x6c2 <malloc+0x6c>
 67c:	40 81       	ld	r20, Z
 67e:	51 81       	ldd	r21, Z+1	; 0x01
 680:	02 81       	ldd	r16, Z+2	; 0x02
 682:	13 81       	ldd	r17, Z+3	; 0x03
 684:	48 17       	cp	r20, r24
 686:	59 07       	cpc	r21, r25
 688:	c8 f0       	brcs	.+50     	; 0x6bc <malloc+0x66>
 68a:	84 17       	cp	r24, r20
 68c:	95 07       	cpc	r25, r21
 68e:	69 f4       	brne	.+26     	; 0x6aa <malloc+0x54>
 690:	10 97       	sbiw	r26, 0x00	; 0
 692:	31 f0       	breq	.+12     	; 0x6a0 <malloc+0x4a>
 694:	12 96       	adiw	r26, 0x02	; 2
 696:	0c 93       	st	X, r16
 698:	12 97       	sbiw	r26, 0x02	; 2
 69a:	13 96       	adiw	r26, 0x03	; 3
 69c:	1c 93       	st	X, r17
 69e:	27 c0       	rjmp	.+78     	; 0x6ee <malloc+0x98>
 6a0:	00 93 48 02 	sts	0x0248, r16	; 0x800248 <__flp>
 6a4:	10 93 49 02 	sts	0x0249, r17	; 0x800249 <__flp+0x1>
 6a8:	22 c0       	rjmp	.+68     	; 0x6ee <malloc+0x98>
 6aa:	21 15       	cp	r18, r1
 6ac:	31 05       	cpc	r19, r1
 6ae:	19 f0       	breq	.+6      	; 0x6b6 <malloc+0x60>
 6b0:	42 17       	cp	r20, r18
 6b2:	53 07       	cpc	r21, r19
 6b4:	18 f4       	brcc	.+6      	; 0x6bc <malloc+0x66>
 6b6:	9a 01       	movw	r18, r20
 6b8:	bd 01       	movw	r22, r26
 6ba:	ef 01       	movw	r28, r30
 6bc:	df 01       	movw	r26, r30
 6be:	f8 01       	movw	r30, r16
 6c0:	db cf       	rjmp	.-74     	; 0x678 <malloc+0x22>
 6c2:	21 15       	cp	r18, r1
 6c4:	31 05       	cpc	r19, r1
 6c6:	f9 f0       	breq	.+62     	; 0x706 <malloc+0xb0>
 6c8:	28 1b       	sub	r18, r24
 6ca:	39 0b       	sbc	r19, r25
 6cc:	24 30       	cpi	r18, 0x04	; 4
 6ce:	31 05       	cpc	r19, r1
 6d0:	80 f4       	brcc	.+32     	; 0x6f2 <malloc+0x9c>
 6d2:	8a 81       	ldd	r24, Y+2	; 0x02
 6d4:	9b 81       	ldd	r25, Y+3	; 0x03
 6d6:	61 15       	cp	r22, r1
 6d8:	71 05       	cpc	r23, r1
 6da:	21 f0       	breq	.+8      	; 0x6e4 <malloc+0x8e>
 6dc:	fb 01       	movw	r30, r22
 6de:	93 83       	std	Z+3, r25	; 0x03
 6e0:	82 83       	std	Z+2, r24	; 0x02
 6e2:	04 c0       	rjmp	.+8      	; 0x6ec <malloc+0x96>
 6e4:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <__flp+0x1>
 6e8:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <__flp>
 6ec:	fe 01       	movw	r30, r28
 6ee:	32 96       	adiw	r30, 0x02	; 2
 6f0:	44 c0       	rjmp	.+136    	; 0x77a <malloc+0x124>
 6f2:	fe 01       	movw	r30, r28
 6f4:	e2 0f       	add	r30, r18
 6f6:	f3 1f       	adc	r31, r19
 6f8:	81 93       	st	Z+, r24
 6fa:	91 93       	st	Z+, r25
 6fc:	22 50       	subi	r18, 0x02	; 2
 6fe:	31 09       	sbc	r19, r1
 700:	39 83       	std	Y+1, r19	; 0x01
 702:	28 83       	st	Y, r18
 704:	3a c0       	rjmp	.+116    	; 0x77a <malloc+0x124>
 706:	20 91 46 02 	lds	r18, 0x0246	; 0x800246 <__brkval>
 70a:	30 91 47 02 	lds	r19, 0x0247	; 0x800247 <__brkval+0x1>
 70e:	23 2b       	or	r18, r19
 710:	41 f4       	brne	.+16     	; 0x722 <malloc+0xcc>
 712:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 716:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 71a:	30 93 47 02 	sts	0x0247, r19	; 0x800247 <__brkval+0x1>
 71e:	20 93 46 02 	sts	0x0246, r18	; 0x800246 <__brkval>
 722:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 726:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 72a:	21 15       	cp	r18, r1
 72c:	31 05       	cpc	r19, r1
 72e:	41 f4       	brne	.+16     	; 0x740 <malloc+0xea>
 730:	2d b7       	in	r18, 0x3d	; 61
 732:	3e b7       	in	r19, 0x3e	; 62
 734:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 738:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 73c:	24 1b       	sub	r18, r20
 73e:	35 0b       	sbc	r19, r21
 740:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <__brkval>
 744:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <__brkval+0x1>
 748:	e2 17       	cp	r30, r18
 74a:	f3 07       	cpc	r31, r19
 74c:	a0 f4       	brcc	.+40     	; 0x776 <malloc+0x120>
 74e:	2e 1b       	sub	r18, r30
 750:	3f 0b       	sbc	r19, r31
 752:	28 17       	cp	r18, r24
 754:	39 07       	cpc	r19, r25
 756:	78 f0       	brcs	.+30     	; 0x776 <malloc+0x120>
 758:	ac 01       	movw	r20, r24
 75a:	4e 5f       	subi	r20, 0xFE	; 254
 75c:	5f 4f       	sbci	r21, 0xFF	; 255
 75e:	24 17       	cp	r18, r20
 760:	35 07       	cpc	r19, r21
 762:	48 f0       	brcs	.+18     	; 0x776 <malloc+0x120>
 764:	4e 0f       	add	r20, r30
 766:	5f 1f       	adc	r21, r31
 768:	50 93 47 02 	sts	0x0247, r21	; 0x800247 <__brkval+0x1>
 76c:	40 93 46 02 	sts	0x0246, r20	; 0x800246 <__brkval>
 770:	81 93       	st	Z+, r24
 772:	91 93       	st	Z+, r25
 774:	02 c0       	rjmp	.+4      	; 0x77a <malloc+0x124>
 776:	e0 e0       	ldi	r30, 0x00	; 0
 778:	f0 e0       	ldi	r31, 0x00	; 0
 77a:	cf 01       	movw	r24, r30
 77c:	df 91       	pop	r29
 77e:	cf 91       	pop	r28
 780:	1f 91       	pop	r17
 782:	0f 91       	pop	r16
 784:	08 95       	ret

00000786 <free>:
 786:	cf 93       	push	r28
 788:	df 93       	push	r29
 78a:	00 97       	sbiw	r24, 0x00	; 0
 78c:	09 f4       	brne	.+2      	; 0x790 <free+0xa>
 78e:	81 c0       	rjmp	.+258    	; 0x892 <free+0x10c>
 790:	fc 01       	movw	r30, r24
 792:	32 97       	sbiw	r30, 0x02	; 2
 794:	13 82       	std	Z+3, r1	; 0x03
 796:	12 82       	std	Z+2, r1	; 0x02
 798:	a0 91 48 02 	lds	r26, 0x0248	; 0x800248 <__flp>
 79c:	b0 91 49 02 	lds	r27, 0x0249	; 0x800249 <__flp+0x1>
 7a0:	10 97       	sbiw	r26, 0x00	; 0
 7a2:	81 f4       	brne	.+32     	; 0x7c4 <free+0x3e>
 7a4:	20 81       	ld	r18, Z
 7a6:	31 81       	ldd	r19, Z+1	; 0x01
 7a8:	82 0f       	add	r24, r18
 7aa:	93 1f       	adc	r25, r19
 7ac:	20 91 46 02 	lds	r18, 0x0246	; 0x800246 <__brkval>
 7b0:	30 91 47 02 	lds	r19, 0x0247	; 0x800247 <__brkval+0x1>
 7b4:	28 17       	cp	r18, r24
 7b6:	39 07       	cpc	r19, r25
 7b8:	51 f5       	brne	.+84     	; 0x80e <free+0x88>
 7ba:	f0 93 47 02 	sts	0x0247, r31	; 0x800247 <__brkval+0x1>
 7be:	e0 93 46 02 	sts	0x0246, r30	; 0x800246 <__brkval>
 7c2:	67 c0       	rjmp	.+206    	; 0x892 <free+0x10c>
 7c4:	ed 01       	movw	r28, r26
 7c6:	20 e0       	ldi	r18, 0x00	; 0
 7c8:	30 e0       	ldi	r19, 0x00	; 0
 7ca:	ce 17       	cp	r28, r30
 7cc:	df 07       	cpc	r29, r31
 7ce:	40 f4       	brcc	.+16     	; 0x7e0 <free+0x5a>
 7d0:	4a 81       	ldd	r20, Y+2	; 0x02
 7d2:	5b 81       	ldd	r21, Y+3	; 0x03
 7d4:	9e 01       	movw	r18, r28
 7d6:	41 15       	cp	r20, r1
 7d8:	51 05       	cpc	r21, r1
 7da:	f1 f0       	breq	.+60     	; 0x818 <free+0x92>
 7dc:	ea 01       	movw	r28, r20
 7de:	f5 cf       	rjmp	.-22     	; 0x7ca <free+0x44>
 7e0:	d3 83       	std	Z+3, r29	; 0x03
 7e2:	c2 83       	std	Z+2, r28	; 0x02
 7e4:	40 81       	ld	r20, Z
 7e6:	51 81       	ldd	r21, Z+1	; 0x01
 7e8:	84 0f       	add	r24, r20
 7ea:	95 1f       	adc	r25, r21
 7ec:	c8 17       	cp	r28, r24
 7ee:	d9 07       	cpc	r29, r25
 7f0:	59 f4       	brne	.+22     	; 0x808 <free+0x82>
 7f2:	88 81       	ld	r24, Y
 7f4:	99 81       	ldd	r25, Y+1	; 0x01
 7f6:	84 0f       	add	r24, r20
 7f8:	95 1f       	adc	r25, r21
 7fa:	02 96       	adiw	r24, 0x02	; 2
 7fc:	91 83       	std	Z+1, r25	; 0x01
 7fe:	80 83       	st	Z, r24
 800:	8a 81       	ldd	r24, Y+2	; 0x02
 802:	9b 81       	ldd	r25, Y+3	; 0x03
 804:	93 83       	std	Z+3, r25	; 0x03
 806:	82 83       	std	Z+2, r24	; 0x02
 808:	21 15       	cp	r18, r1
 80a:	31 05       	cpc	r19, r1
 80c:	29 f4       	brne	.+10     	; 0x818 <free+0x92>
 80e:	f0 93 49 02 	sts	0x0249, r31	; 0x800249 <__flp+0x1>
 812:	e0 93 48 02 	sts	0x0248, r30	; 0x800248 <__flp>
 816:	3d c0       	rjmp	.+122    	; 0x892 <free+0x10c>
 818:	e9 01       	movw	r28, r18
 81a:	fb 83       	std	Y+3, r31	; 0x03
 81c:	ea 83       	std	Y+2, r30	; 0x02
 81e:	49 91       	ld	r20, Y+
 820:	59 91       	ld	r21, Y+
 822:	c4 0f       	add	r28, r20
 824:	d5 1f       	adc	r29, r21
 826:	ec 17       	cp	r30, r28
 828:	fd 07       	cpc	r31, r29
 82a:	61 f4       	brne	.+24     	; 0x844 <free+0xbe>
 82c:	80 81       	ld	r24, Z
 82e:	91 81       	ldd	r25, Z+1	; 0x01
 830:	84 0f       	add	r24, r20
 832:	95 1f       	adc	r25, r21
 834:	02 96       	adiw	r24, 0x02	; 2
 836:	e9 01       	movw	r28, r18
 838:	99 83       	std	Y+1, r25	; 0x01
 83a:	88 83       	st	Y, r24
 83c:	82 81       	ldd	r24, Z+2	; 0x02
 83e:	93 81       	ldd	r25, Z+3	; 0x03
 840:	9b 83       	std	Y+3, r25	; 0x03
 842:	8a 83       	std	Y+2, r24	; 0x02
 844:	e0 e0       	ldi	r30, 0x00	; 0
 846:	f0 e0       	ldi	r31, 0x00	; 0
 848:	12 96       	adiw	r26, 0x02	; 2
 84a:	8d 91       	ld	r24, X+
 84c:	9c 91       	ld	r25, X
 84e:	13 97       	sbiw	r26, 0x03	; 3
 850:	00 97       	sbiw	r24, 0x00	; 0
 852:	19 f0       	breq	.+6      	; 0x85a <free+0xd4>
 854:	fd 01       	movw	r30, r26
 856:	dc 01       	movw	r26, r24
 858:	f7 cf       	rjmp	.-18     	; 0x848 <free+0xc2>
 85a:	8d 91       	ld	r24, X+
 85c:	9c 91       	ld	r25, X
 85e:	11 97       	sbiw	r26, 0x01	; 1
 860:	9d 01       	movw	r18, r26
 862:	2e 5f       	subi	r18, 0xFE	; 254
 864:	3f 4f       	sbci	r19, 0xFF	; 255
 866:	82 0f       	add	r24, r18
 868:	93 1f       	adc	r25, r19
 86a:	20 91 46 02 	lds	r18, 0x0246	; 0x800246 <__brkval>
 86e:	30 91 47 02 	lds	r19, 0x0247	; 0x800247 <__brkval+0x1>
 872:	28 17       	cp	r18, r24
 874:	39 07       	cpc	r19, r25
 876:	69 f4       	brne	.+26     	; 0x892 <free+0x10c>
 878:	30 97       	sbiw	r30, 0x00	; 0
 87a:	29 f4       	brne	.+10     	; 0x886 <free+0x100>
 87c:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <__flp+0x1>
 880:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <__flp>
 884:	02 c0       	rjmp	.+4      	; 0x88a <free+0x104>
 886:	13 82       	std	Z+3, r1	; 0x03
 888:	12 82       	std	Z+2, r1	; 0x02
 88a:	b0 93 47 02 	sts	0x0247, r27	; 0x800247 <__brkval+0x1>
 88e:	a0 93 46 02 	sts	0x0246, r26	; 0x800246 <__brkval>
 892:	df 91       	pop	r29
 894:	cf 91       	pop	r28
 896:	08 95       	ret

00000898 <memset>:
 898:	dc 01       	movw	r26, r24
 89a:	01 c0       	rjmp	.+2      	; 0x89e <memset+0x6>
 89c:	6d 93       	st	X+, r22
 89e:	41 50       	subi	r20, 0x01	; 1
 8a0:	50 40       	sbci	r21, 0x00	; 0
 8a2:	e0 f7       	brcc	.-8      	; 0x89c <memset+0x4>
 8a4:	08 95       	ret

000008a6 <fgetc>:
 8a6:	cf 93       	push	r28
 8a8:	df 93       	push	r29
 8aa:	ec 01       	movw	r28, r24
 8ac:	2b 81       	ldd	r18, Y+3	; 0x03
 8ae:	20 ff       	sbrs	r18, 0
 8b0:	33 c0       	rjmp	.+102    	; 0x918 <fgetc+0x72>
 8b2:	26 ff       	sbrs	r18, 6
 8b4:	0a c0       	rjmp	.+20     	; 0x8ca <fgetc+0x24>
 8b6:	2f 7b       	andi	r18, 0xBF	; 191
 8b8:	2b 83       	std	Y+3, r18	; 0x03
 8ba:	8e 81       	ldd	r24, Y+6	; 0x06
 8bc:	9f 81       	ldd	r25, Y+7	; 0x07
 8be:	01 96       	adiw	r24, 0x01	; 1
 8c0:	9f 83       	std	Y+7, r25	; 0x07
 8c2:	8e 83       	std	Y+6, r24	; 0x06
 8c4:	8a 81       	ldd	r24, Y+2	; 0x02
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	29 c0       	rjmp	.+82     	; 0x91c <fgetc+0x76>
 8ca:	22 ff       	sbrs	r18, 2
 8cc:	0f c0       	rjmp	.+30     	; 0x8ec <fgetc+0x46>
 8ce:	e8 81       	ld	r30, Y
 8d0:	f9 81       	ldd	r31, Y+1	; 0x01
 8d2:	80 81       	ld	r24, Z
 8d4:	08 2e       	mov	r0, r24
 8d6:	00 0c       	add	r0, r0
 8d8:	99 0b       	sbc	r25, r25
 8da:	00 97       	sbiw	r24, 0x00	; 0
 8dc:	19 f4       	brne	.+6      	; 0x8e4 <fgetc+0x3e>
 8de:	20 62       	ori	r18, 0x20	; 32
 8e0:	2b 83       	std	Y+3, r18	; 0x03
 8e2:	1a c0       	rjmp	.+52     	; 0x918 <fgetc+0x72>
 8e4:	31 96       	adiw	r30, 0x01	; 1
 8e6:	f9 83       	std	Y+1, r31	; 0x01
 8e8:	e8 83       	st	Y, r30
 8ea:	0e c0       	rjmp	.+28     	; 0x908 <fgetc+0x62>
 8ec:	ea 85       	ldd	r30, Y+10	; 0x0a
 8ee:	fb 85       	ldd	r31, Y+11	; 0x0b
 8f0:	09 95       	icall
 8f2:	97 ff       	sbrs	r25, 7
 8f4:	09 c0       	rjmp	.+18     	; 0x908 <fgetc+0x62>
 8f6:	2b 81       	ldd	r18, Y+3	; 0x03
 8f8:	01 96       	adiw	r24, 0x01	; 1
 8fa:	11 f0       	breq	.+4      	; 0x900 <fgetc+0x5a>
 8fc:	80 e2       	ldi	r24, 0x20	; 32
 8fe:	01 c0       	rjmp	.+2      	; 0x902 <fgetc+0x5c>
 900:	80 e1       	ldi	r24, 0x10	; 16
 902:	82 2b       	or	r24, r18
 904:	8b 83       	std	Y+3, r24	; 0x03
 906:	08 c0       	rjmp	.+16     	; 0x918 <fgetc+0x72>
 908:	2e 81       	ldd	r18, Y+6	; 0x06
 90a:	3f 81       	ldd	r19, Y+7	; 0x07
 90c:	2f 5f       	subi	r18, 0xFF	; 255
 90e:	3f 4f       	sbci	r19, 0xFF	; 255
 910:	3f 83       	std	Y+7, r19	; 0x07
 912:	2e 83       	std	Y+6, r18	; 0x06
 914:	99 27       	eor	r25, r25
 916:	02 c0       	rjmp	.+4      	; 0x91c <fgetc+0x76>
 918:	8f ef       	ldi	r24, 0xFF	; 255
 91a:	9f ef       	ldi	r25, 0xFF	; 255
 91c:	df 91       	pop	r29
 91e:	cf 91       	pop	r28
 920:	08 95       	ret

00000922 <__prologue_saves__>:
 922:	2f 92       	push	r2
 924:	3f 92       	push	r3
 926:	4f 92       	push	r4
 928:	5f 92       	push	r5
 92a:	6f 92       	push	r6
 92c:	7f 92       	push	r7
 92e:	8f 92       	push	r8
 930:	9f 92       	push	r9
 932:	af 92       	push	r10
 934:	bf 92       	push	r11
 936:	cf 92       	push	r12
 938:	df 92       	push	r13
 93a:	ef 92       	push	r14
 93c:	ff 92       	push	r15
 93e:	0f 93       	push	r16
 940:	1f 93       	push	r17
 942:	cf 93       	push	r28
 944:	df 93       	push	r29
 946:	cd b7       	in	r28, 0x3d	; 61
 948:	de b7       	in	r29, 0x3e	; 62
 94a:	ca 1b       	sub	r28, r26
 94c:	db 0b       	sbc	r29, r27
 94e:	0f b6       	in	r0, 0x3f	; 63
 950:	f8 94       	cli
 952:	de bf       	out	0x3e, r29	; 62
 954:	0f be       	out	0x3f, r0	; 63
 956:	cd bf       	out	0x3d, r28	; 61
 958:	09 94       	ijmp

0000095a <__epilogue_restores__>:
 95a:	2a 88       	ldd	r2, Y+18	; 0x12
 95c:	39 88       	ldd	r3, Y+17	; 0x11
 95e:	48 88       	ldd	r4, Y+16	; 0x10
 960:	5f 84       	ldd	r5, Y+15	; 0x0f
 962:	6e 84       	ldd	r6, Y+14	; 0x0e
 964:	7d 84       	ldd	r7, Y+13	; 0x0d
 966:	8c 84       	ldd	r8, Y+12	; 0x0c
 968:	9b 84       	ldd	r9, Y+11	; 0x0b
 96a:	aa 84       	ldd	r10, Y+10	; 0x0a
 96c:	b9 84       	ldd	r11, Y+9	; 0x09
 96e:	c8 84       	ldd	r12, Y+8	; 0x08
 970:	df 80       	ldd	r13, Y+7	; 0x07
 972:	ee 80       	ldd	r14, Y+6	; 0x06
 974:	fd 80       	ldd	r15, Y+5	; 0x05
 976:	0c 81       	ldd	r16, Y+4	; 0x04
 978:	1b 81       	ldd	r17, Y+3	; 0x03
 97a:	aa 81       	ldd	r26, Y+2	; 0x02
 97c:	b9 81       	ldd	r27, Y+1	; 0x01
 97e:	ce 0f       	add	r28, r30
 980:	d1 1d       	adc	r29, r1
 982:	0f b6       	in	r0, 0x3f	; 63
 984:	f8 94       	cli
 986:	de bf       	out	0x3e, r29	; 62
 988:	0f be       	out	0x3f, r0	; 63
 98a:	cd bf       	out	0x3d, r28	; 61
 98c:	ed 01       	movw	r28, r26
 98e:	08 95       	ret

00000990 <_exit>:
 990:	f8 94       	cli

00000992 <__stop_program>:
 992:	ff cf       	rjmp	.-2      	; 0x992 <__stop_program>
